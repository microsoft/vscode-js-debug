{
  "name": "pwa-debugger",
  "displayName": "PWA Debugger",
  "version": "0.9.0",
  "publisher": "",
  "description": "PWA debugger extension.",
  "author": {
    "name": "Microsoft Corporation",
    "email": "pfeldman@microsoft.com"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.30.0-insider",
    "node": "^8.9.3"
  },
  "icon": "images/mock-debug-icon.png",
  "categories": [
    "Debuggers"
  ],
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/Microsoft/vscode-mock-debug.git"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/vscode-mock-debug/issues"
  },
  "scripts": {
    "prepublish": "tsc -p ./src",
    "compile": "tsc -p ./src",
    "tslint": "tslint ./src/**/*.ts",
    "watch": "tsc -w -p ./src",
    "package": "vsce package",
    "publish": "vsce publish",
    "test": "node ./out/test/runTest.js"
  },
  "dependencies": {
    "color": "^3.1.2",
    "debug": "^4.1.1",
    "js-beautify": "^1.10.0",
    "source-map": "^0.7.3",
    "vscode-nls": "^4.1.1",
    "which": "^1.3.1",
    "ws": "^7.0.1"
  },
  "devDependencies": {
    "@pptr/testrunner": "^0.7.0",
    "@types/color": "^3.0.0",
    "@types/debug": "^4.1.4",
    "@types/express": "^4.17.0",
    "@types/js-beautify": "^1.8.1",
    "@types/node": "^8.9.3",
    "@types/vscode": "^1.30.0",
    "@types/which": "^1.3.1",
    "@types/ws": "^6.0.1",
    "express": "^4.17.1",
    "tslint": "5.11.0",
    "typescript": "^3.1.6",
    "vsce": "1.53.2",
    "vscode-test": "^1.0.0"
  },
  "main": "./out/extension",
  "activationEvents": [
    "onDebug",
    "onView:pwa.threadsView",
    "onView:pwa.breakpoints",
    "onView:pwa.serviceWorkers",
    "onView:pwa.cacheStorage"
  ],
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "pwa",
          "title": "PWA",
          "icon": "resources/pwa.svg"
        }
      ]
    },
    "views": {
      "debug": [
        {
          "id": "pwa.threadsView",
          "name": "Threads"
        },
        {
          "id": "pwa.breakpoints",
          "name": "Browser breakpoints"
        }
      ],
      "pwa": [
        {
          "id": "pwa.serviceWorkers",
          "name": "Service Workers"
        },
        {
          "id": "pwa.cacheStorage",
          "name": "Cache Storage"
        }
      ]
    },
    "commands": [
      {
        "command": "pwa.addCustomBreakpoints",
        "title": "Add Browser Breakpoint",
        "icon": {
          "light": "resources/light/add.svg",
          "dark": "resources/dark/add.svg"
        }
      },
      {
        "command": "pwa.removeCustomBreakpoint",
        "title": "Remove Browser Breakpoint",
        "icon": {
          "light": "resources/light/remove.svg",
          "dark": "resources/dark/remove.svg"
        }
      },
      {
        "command": "pwa.removeAllCustomBreakpoints",
        "title": "Remove All Browser Breakpoints",
        "icon": {
          "light": "resources/light/remove-all.svg",
          "dark": "resources/dark/remove-all.svg"
        }
      },
      {
        "command": "pwa.prettyPrint",
        "title": "Pretty print for debugging"
      },
      {
        "command": "pwa.changeServiceWorkersMode",
        "title": "Configure Service Workers Mode",
        "icon": {
          "light": "resources/light/configure.svg",
          "dark": "resources/dark/configure.svg"
        }
      },
      {
        "command": "pwa.pauseThread",
        "title": "Pause thread",
        "icon": {
          "light": "resources/light/pause.svg",
          "dark": "resources/dark/pause.svg"
        }
      },
      {
        "command": "pwa.resumeThread",
        "title": "Resume thread",
        "icon": {
          "light": "resources/light/resume.svg",
          "dark": "resources/dark/resume.svg"
        }
      },
      {
        "command": "pwa.stopTarget",
        "title": "Terminate target",
        "icon": {
          "light": "resources/light/stop.svg",
          "dark": "resources/dark/stop.svg"
        }
      },
      {
        "command": "pwa.restartTarget",
        "title": "Restart target",
        "icon": {
          "light": "resources/light/restart.svg",
          "dark": "resources/dark/restart.svg"
        }
      },
      {
        "command": "pwa.attachToTarget",
        "title": "Attach to target",
        "icon": {
          "light": "resources/light/connect.svg",
          "dark": "resources/dark/connect.svg"
        }
      },
      {
        "command": "pwa.detachFromTarget",
        "title": "Detach from target",
        "icon": {
          "light": "resources/light/disconnect.svg",
          "dark": "resources/dark/disconnect.svg"
        }
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "pwa.addCustomBreakpoints",
          "when": "view == pwa.breakpoints",
          "group": "navigation"
        },
        {
          "command": "pwa.removeAllCustomBreakpoints",
          "when": "view == pwa.breakpoints",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "pwa.removeCustomBreakpoint",
          "when": "view == pwa.breakpoints",
          "group": "inline"
        },
        {
          "command": "pwa.addCustomBreakpoints",
          "when": "view == pwa.breakpoints"
        },
        {
          "command": "pwa.removeCustomBreakpoint",
          "when": "view == pwa.breakpoints"
        },
        {
          "command": "pwa.removeAllCustomBreakpoints",
          "when": "view == pwa.breakpoints"
        },
        {
          "command": "pwa.changeServiceWorkersMode",
          "when": "view == pwa.serviceWorkers && viewItem == pwa.serviceWorkerMode",
          "group": "inline"
        },
        {
          "command": "pwa.pauseThread",
          "when": "view == pwa.threadsView && viewItem =~ /.*canPause.*/",
          "group": "inline"
        },
        {
          "command": "pwa.resumeThread",
          "when": "view == pwa.threadsView && viewItem =~ /.*canRun.*/",
          "group": "inline"
        },
        {
          "command": "pwa.stopTarget",
          "when": "view == pwa.threadsView && viewItem =~ /.*canStop.*/",
          "group": "inline"
        },
        {
          "command": "pwa.restartTarget",
          "when": "view == pwa.threadsView && viewItem =~ /.*canRestart.*/",
          "group": "inline"
        },
        {
          "command": "pwa.attachToTarget",
          "when": "view == pwa.threadsView && viewItem =~ /.*canAttach.*/",
          "group": "inline"
        },
        {
          "command": "pwa.detachFromTarget",
          "when": "view == pwa.threadsView && viewItem =~ /.*canDetach.*/",
          "group": "inline"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "javascript"
      },
      {
        "language": "typescript"
      },
      {
        "language": "typescriptreact"
      },
      {
        "language": "javascriptreact"
      },
      {
        "language": "fsharp"
      },
      {
        "language": "html"
      }
    ],
    "debuggers": [
      {
        "type": "pwa",
        "label": "Launch PWA",
        "configurationAttributes": {
          "launch": {
            "properties": {
              "url": {
                "type": "string",
                "description": "Page url"
              },
              "webRoot": {
                "type": "string",
                "description": "Path to source files"
              },
              "runtimeExecutable": {
                "type": "string",
                "description": "Path to runtime"
              },
              "cwd": {
                "type": "string",
                "description": "Current working directory"
              },
              "args": {
                "type": "array",
                "description": "Program arguments"
              },
              "env": {
                "type": "object",
                "description": "Environment variables"
              },
              "attachToNode": {
                "type": "string",
                "description": "Attach to Node processes",
                "enum": [
                  "never",
                  "always",
                  "top-level"
                ]
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "pwa",
            "request": "launch",
            "name": "Launch browser"
          }
        ],
        "configurationSnippets": [
          {
            "label": "Launch browser with PWA",
            "description": "A new configuration for running browser with CDP",
            "body": {
              "type": "pwa",
              "request": "launch",
              "name": "Launch browser with PWA",
              "url": "http://localhost:${1:3000}",
              "webRoot": "^\"\\${workspaceFolder}\""
            }
          },
          {
            "label": "Launch program with PWA",
            "description": "A new configuration for running Node program with CDP",
            "body": {
              "type": "pwa",
              "request": "launch",
              "name": "Launch program with PWA",
              "runtimeExecutable": "node",
              "cwd": "^\"\\${workspaceFolder}\"",
              "args": [
                "^\"\\${workspaceFolder}/${1:index.js}\""
              ],
              "attachToNode": "always"
            }
          }
        ]
      }
    ]
  }
}
