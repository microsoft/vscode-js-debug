// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/****************************************************************
 * Auto-generated by generate-dap-api.js, do not edit manually. *
 ****************************************************************/

import * as E from './error';

export namespace Dap {
  export type Error = E.Error;
  export type Message = E.Message;
  export type integer = number;

  export interface Api {
    /**
     * The 'cancel' request is used by the frontend in two situations:
     * - to indicate that it is no longer interested in the result produced by a specific request issued earlier
     * - to cancel a progress sequence. Clients should only call this request if the capability 'supportsCancelRequest' is true.
     * This request has a hint characteristic: a debug adapter can only be expected to make a 'best effort' in honouring this request but there are no guarantees.
     * The 'cancel' request may return an error if it could not cancel an operation but a frontend should refrain from presenting this error to end users.
     * A frontend client should only call this request if the capability 'supportsCancelRequest' is true.
     * The request that got canceled still needs to send a response back. This can either be a normal result ('success' attribute true)
     * or an error response ('success' attribute false and the 'message' set to 'cancelled').
     * Returning partial results from a cancelled request is possible but please note that a frontend client has no generic way for detecting that a response is partial or not.
     *  The progress that got cancelled still needs to send a 'progressEnd' event back.
     *  A client should not assume that progress just got cancelled after sending the 'cancel' request.
     */
    on(
      request: 'cancel',
      handler: (params: CancelParams) => Promise<CancelResult | Error>,
    ): () => void;
    /**
     * The 'cancel' request is used by the frontend in two situations:
     * - to indicate that it is no longer interested in the result produced by a specific request issued earlier
     * - to cancel a progress sequence. Clients should only call this request if the capability 'supportsCancelRequest' is true.
     * This request has a hint characteristic: a debug adapter can only be expected to make a 'best effort' in honouring this request but there are no guarantees.
     * The 'cancel' request may return an error if it could not cancel an operation but a frontend should refrain from presenting this error to end users.
     * A frontend client should only call this request if the capability 'supportsCancelRequest' is true.
     * The request that got canceled still needs to send a response back. This can either be a normal result ('success' attribute true)
     * or an error response ('success' attribute false and the 'message' set to 'cancelled').
     * Returning partial results from a cancelled request is possible but please note that a frontend client has no generic way for detecting that a response is partial or not.
     *  The progress that got cancelled still needs to send a 'progressEnd' event back.
     *  A client should not assume that progress just got cancelled after sending the 'cancel' request.
     */
    cancelRequest(params: CancelParams): Promise<CancelResult>;

    /**
     * This event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).
     * A debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the 'initialize' request has finished).
     * The sequence of events/requests is as follows:
     * - adapters sends 'initialized' event (after the 'initialize' request has returned)
     * - frontend sends zero or more 'setBreakpoints' requests
     * - frontend sends one 'setFunctionBreakpoints' request (if capability 'supportsFunctionBreakpoints' is true)
     * - frontend sends a 'setExceptionBreakpoints' request if one or more 'exceptionBreakpointFilters' have been defined (or if 'supportsConfigurationDoneRequest' is not defined or false)
     * - frontend sends other future configuration requests
     * - frontend sends one 'configurationDone' request to indicate the end of the configuration.
     */
    initialized(params: InitializedEventParams): void;

    /**
     * The event indicates that the execution of the debuggee has stopped due to some condition.
     * This can be caused by a break point previously set, a stepping request has completed, by executing a debugger statement etc.
     */
    stopped(params: StoppedEventParams): void;

    /**
     * The event indicates that the execution of the debuggee has continued.
     * Please note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. 'launch' or 'continue'.
     * It is only necessary to send a 'continued' event if there was no previous request that implied this.
     */
    continued(params: ContinuedEventParams): void;

    /**
     * The event indicates that the debuggee has exited and returns its exit code.
     */
    exited(params: ExitedEventParams): void;

    /**
     * The event indicates that debugging of the debuggee has terminated. This does **not** mean that the debuggee itself has exited.
     */
    terminated(params: TerminatedEventParams): void;

    /**
     * The event indicates that a thread has started or exited.
     */
    thread(params: ThreadEventParams): void;

    /**
     * The event indicates that the target has produced some output.
     */
    output(params: OutputEventParams): void;

    /**
     * The event indicates that some information about a breakpoint has changed.
     */
    breakpoint(params: BreakpointEventParams): void;

    /**
     * The event indicates that some information about a module has changed.
     */
    module(params: ModuleEventParams): void;

    /**
     * The event indicates that some source has been added, changed, or removed from the set of all loaded sources.
     */
    loadedSource(params: LoadedSourceEventParams): void;

    /**
     * The event indicates that the debugger has begun debugging a new process. Either one that it has launched, or one that it has attached to.
     */
    process(params: ProcessEventParams): void;

    /**
     * The event indicates that one or more capabilities have changed.
     * Since the capabilities are dependent on the frontend and its UI, it might not be possible to change that at random times (or too late).
     * Consequently this event has a hint characteristic: a frontend can only be expected to make a 'best effort' in honouring individual capabilities but there are no guarantees.
     * Only changed capabilities need to be included, all other capabilities keep their values.
     */
    capabilities(params: CapabilitiesEventParams): void;

    /**
     * The event signals that a long running operation is about to start and
     * provides additional information for the client to set up a corresponding progress and cancellation UI.
     * The client is free to delay the showing of the UI in order to reduce flicker.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    progressStart(params: ProgressStartEventParams): void;

    /**
     * The event signals that the progress reporting needs to updated with a new message and/or percentage.
     * The client does not have to update the UI immediately, but the clients needs to keep track of the message and/or percentage values.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    progressUpdate(params: ProgressUpdateEventParams): void;

    /**
     * The event signals the end of the progress reporting with an optional final message.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    progressEnd(params: ProgressEndEventParams): void;

    /**
     * This optional request is sent from the debug adapter to the client to run a command in a terminal.
     * This is typically used to launch the debuggee in a terminal provided by the client.
     * This request should only be called if the client has passed the value true for the 'supportsRunInTerminalRequest' capability of the 'initialize' request.
     */
    on(
      request: 'runInTerminal',
      handler: (params: RunInTerminalParams) => Promise<RunInTerminalResult | Error>,
    ): () => void;
    /**
     * This optional request is sent from the debug adapter to the client to run a command in a terminal.
     * This is typically used to launch the debuggee in a terminal provided by the client.
     * This request should only be called if the client has passed the value true for the 'supportsRunInTerminalRequest' capability of the 'initialize' request.
     */
    runInTerminalRequest(params: RunInTerminalParams): Promise<RunInTerminalResult>;

    /**
     * The 'initialize' request is sent as the first request from the client to the debug adapter
     * in order to configure it with client capabilities and to retrieve capabilities from the debug adapter.
     * Until the debug adapter has responded to with an 'initialize' response, the client must not send any additional requests or events to the debug adapter.
     * In addition the debug adapter is not allowed to send any requests or events to the client until it has responded with an 'initialize' response.
     * The 'initialize' request may only be sent once.
     */
    on(
      request: 'initialize',
      handler: (params: InitializeParams) => Promise<InitializeResult | Error>,
    ): () => void;
    /**
     * The 'initialize' request is sent as the first request from the client to the debug adapter
     * in order to configure it with client capabilities and to retrieve capabilities from the debug adapter.
     * Until the debug adapter has responded to with an 'initialize' response, the client must not send any additional requests or events to the debug adapter.
     * In addition the debug adapter is not allowed to send any requests or events to the client until it has responded with an 'initialize' response.
     * The 'initialize' request may only be sent once.
     */
    initializeRequest(params: InitializeParams): Promise<InitializeResult>;

    /**
     * This optional request indicates that the client has finished initialization of the debug adapter.
     * So it is the last request in the sequence of configuration requests (which was started by the 'initialized' event).
     * Clients should only call this request if the capability 'supportsConfigurationDoneRequest' is true.
     */
    on(
      request: 'configurationDone',
      handler: (params: ConfigurationDoneParams) => Promise<ConfigurationDoneResult | Error>,
    ): () => void;
    /**
     * This optional request indicates that the client has finished initialization of the debug adapter.
     * So it is the last request in the sequence of configuration requests (which was started by the 'initialized' event).
     * Clients should only call this request if the capability 'supportsConfigurationDoneRequest' is true.
     */
    configurationDoneRequest(params: ConfigurationDoneParams): Promise<ConfigurationDoneResult>;

    /**
     * This launch request is sent from the client to the debug adapter to start the debuggee with or without debugging (if 'noDebug' is true).
     * Since launching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    on(
      request: 'launch',
      handler: (params: LaunchParams) => Promise<LaunchResult | Error>,
    ): () => void;
    /**
     * This launch request is sent from the client to the debug adapter to start the debuggee with or without debugging (if 'noDebug' is true).
     * Since launching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    launchRequest(params: LaunchParams): Promise<LaunchResult>;

    /**
     * The attach request is sent from the client to the debug adapter to attach to a debuggee that is already running.
     * Since attaching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    on(
      request: 'attach',
      handler: (params: AttachParams) => Promise<AttachResult | Error>,
    ): () => void;
    /**
     * The attach request is sent from the client to the debug adapter to attach to a debuggee that is already running.
     * Since attaching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    attachRequest(params: AttachParams): Promise<AttachResult>;

    /**
     * Restarts a debug session. Clients should only call this request if the capability 'supportsRestartRequest' is true.
     * If the capability is missing or has the value false, a typical client will emulate 'restart' by terminating the debug adapter first and then launching it anew.
     */
    on(
      request: 'restart',
      handler: (params: RestartParams) => Promise<RestartResult | Error>,
    ): () => void;
    /**
     * Restarts a debug session. Clients should only call this request if the capability 'supportsRestartRequest' is true.
     * If the capability is missing or has the value false, a typical client will emulate 'restart' by terminating the debug adapter first and then launching it anew.
     */
    restartRequest(params: RestartParams): Promise<RestartResult>;

    /**
     * The 'disconnect' request is sent from the client to the debug adapter in order to stop debugging.
     * It asks the debug adapter to disconnect from the debuggee and to terminate the debug adapter.
     * If the debuggee has been started with the 'launch' request, the 'disconnect' request terminates the debuggee.
     * If the 'attach' request was used to connect to the debuggee, 'disconnect' does not terminate the debuggee.
     * This behavior can be controlled with the 'terminateDebuggee' argument (if supported by the debug adapter).
     */
    on(
      request: 'disconnect',
      handler: (params: DisconnectParams) => Promise<DisconnectResult | Error>,
    ): () => void;
    /**
     * The 'disconnect' request is sent from the client to the debug adapter in order to stop debugging.
     * It asks the debug adapter to disconnect from the debuggee and to terminate the debug adapter.
     * If the debuggee has been started with the 'launch' request, the 'disconnect' request terminates the debuggee.
     * If the 'attach' request was used to connect to the debuggee, 'disconnect' does not terminate the debuggee.
     * This behavior can be controlled with the 'terminateDebuggee' argument (if supported by the debug adapter).
     */
    disconnectRequest(params: DisconnectParams): Promise<DisconnectResult>;

    /**
     * The 'terminate' request is sent from the client to the debug adapter in order to give the debuggee a chance for terminating itself.
     * Clients should only call this request if the capability 'supportsTerminateRequest' is true.
     */
    on(
      request: 'terminate',
      handler: (params: TerminateParams) => Promise<TerminateResult | Error>,
    ): () => void;
    /**
     * The 'terminate' request is sent from the client to the debug adapter in order to give the debuggee a chance for terminating itself.
     * Clients should only call this request if the capability 'supportsTerminateRequest' is true.
     */
    terminateRequest(params: TerminateParams): Promise<TerminateResult>;

    /**
     * The 'breakpointLocations' request returns all possible locations for source breakpoints in a given range.
     * Clients should only call this request if the capability 'supportsBreakpointLocationsRequest' is true.
     */
    on(
      request: 'breakpointLocations',
      handler: (params: BreakpointLocationsParams) => Promise<BreakpointLocationsResult | Error>,
    ): () => void;
    /**
     * The 'breakpointLocations' request returns all possible locations for source breakpoints in a given range.
     * Clients should only call this request if the capability 'supportsBreakpointLocationsRequest' is true.
     */
    breakpointLocationsRequest(
      params: BreakpointLocationsParams,
    ): Promise<BreakpointLocationsResult>;

    /**
     * Sets multiple breakpoints for a single source and clears all previous breakpoints in that source.
     * To clear all breakpoint for a source, specify an empty array.
     * When a breakpoint is hit, a 'stopped' event (with reason 'breakpoint') is generated.
     */
    on(
      request: 'setBreakpoints',
      handler: (params: SetBreakpointsParams) => Promise<SetBreakpointsResult | Error>,
    ): () => void;
    /**
     * Sets multiple breakpoints for a single source and clears all previous breakpoints in that source.
     * To clear all breakpoint for a source, specify an empty array.
     * When a breakpoint is hit, a 'stopped' event (with reason 'breakpoint') is generated.
     */
    setBreakpointsRequest(params: SetBreakpointsParams): Promise<SetBreakpointsResult>;

    /**
     * Replaces all existing function breakpoints with new function breakpoints.
     * To clear all function breakpoints, specify an empty array.
     * When a function breakpoint is hit, a 'stopped' event (with reason 'function breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsFunctionBreakpoints' is true.
     */
    on(
      request: 'setFunctionBreakpoints',
      handler: (
        params: SetFunctionBreakpointsParams,
      ) => Promise<SetFunctionBreakpointsResult | Error>,
    ): () => void;
    /**
     * Replaces all existing function breakpoints with new function breakpoints.
     * To clear all function breakpoints, specify an empty array.
     * When a function breakpoint is hit, a 'stopped' event (with reason 'function breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsFunctionBreakpoints' is true.
     */
    setFunctionBreakpointsRequest(
      params: SetFunctionBreakpointsParams,
    ): Promise<SetFunctionBreakpointsResult>;

    /**
     * The request configures the debuggers response to thrown exceptions.
     * If an exception is configured to break, a 'stopped' event is fired (with reason 'exception').
     * Clients should only call this request if the capability 'exceptionBreakpointFilters' returns one or more filters.
     */
    on(
      request: 'setExceptionBreakpoints',
      handler: (
        params: SetExceptionBreakpointsParams,
      ) => Promise<SetExceptionBreakpointsResult | Error>,
    ): () => void;
    /**
     * The request configures the debuggers response to thrown exceptions.
     * If an exception is configured to break, a 'stopped' event is fired (with reason 'exception').
     * Clients should only call this request if the capability 'exceptionBreakpointFilters' returns one or more filters.
     */
    setExceptionBreakpointsRequest(
      params: SetExceptionBreakpointsParams,
    ): Promise<SetExceptionBreakpointsResult>;

    /**
     * Obtains information on a possible data breakpoint that could be set on an expression or variable.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    on(
      request: 'dataBreakpointInfo',
      handler: (params: DataBreakpointInfoParams) => Promise<DataBreakpointInfoResult | Error>,
    ): () => void;
    /**
     * Obtains information on a possible data breakpoint that could be set on an expression or variable.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    dataBreakpointInfoRequest(params: DataBreakpointInfoParams): Promise<DataBreakpointInfoResult>;

    /**
     * Replaces all existing data breakpoints with new data breakpoints.
     * To clear all data breakpoints, specify an empty array.
     * When a data breakpoint is hit, a 'stopped' event (with reason 'data breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    on(
      request: 'setDataBreakpoints',
      handler: (params: SetDataBreakpointsParams) => Promise<SetDataBreakpointsResult | Error>,
    ): () => void;
    /**
     * Replaces all existing data breakpoints with new data breakpoints.
     * To clear all data breakpoints, specify an empty array.
     * When a data breakpoint is hit, a 'stopped' event (with reason 'data breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    setDataBreakpointsRequest(params: SetDataBreakpointsParams): Promise<SetDataBreakpointsResult>;

    /**
     * Replaces all existing instruction breakpoints. Typically, instruction breakpoints would be set from a diassembly window.
     * To clear all instruction breakpoints, specify an empty array.
     * When an instruction breakpoint is hit, a 'stopped' event (with reason 'instruction breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsInstructionBreakpoints' is true.
     */
    on(
      request: 'setInstructionBreakpoints',
      handler: (
        params: SetInstructionBreakpointsParams,
      ) => Promise<SetInstructionBreakpointsResult | Error>,
    ): () => void;
    /**
     * Replaces all existing instruction breakpoints. Typically, instruction breakpoints would be set from a diassembly window.
     * To clear all instruction breakpoints, specify an empty array.
     * When an instruction breakpoint is hit, a 'stopped' event (with reason 'instruction breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsInstructionBreakpoints' is true.
     */
    setInstructionBreakpointsRequest(
      params: SetInstructionBreakpointsParams,
    ): Promise<SetInstructionBreakpointsResult>;

    /**
     * The request starts the debuggee to run again.
     */
    on(
      request: 'continue',
      handler: (params: ContinueParams) => Promise<ContinueResult | Error>,
    ): () => void;
    /**
     * The request starts the debuggee to run again.
     */
    continueRequest(params: ContinueParams): Promise<ContinueResult>;

    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    on(request: 'next', handler: (params: NextParams) => Promise<NextResult | Error>): () => void;
    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    nextRequest(params: NextParams): Promise<NextResult>;

    /**
     * The request starts the debuggee to step into a function/method if possible.
     * If it cannot step into a target, 'stepIn' behaves like 'next'.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * If there are multiple function/method calls (or other targets) on the source line,
     * the optional argument 'targetId' can be used to control into which target the 'stepIn' should occur.
     * The list of possible targets for a given source line can be retrieved via the 'stepInTargets' request.
     */
    on(
      request: 'stepIn',
      handler: (params: StepInParams) => Promise<StepInResult | Error>,
    ): () => void;
    /**
     * The request starts the debuggee to step into a function/method if possible.
     * If it cannot step into a target, 'stepIn' behaves like 'next'.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * If there are multiple function/method calls (or other targets) on the source line,
     * the optional argument 'targetId' can be used to control into which target the 'stepIn' should occur.
     * The list of possible targets for a given source line can be retrieved via the 'stepInTargets' request.
     */
    stepInRequest(params: StepInParams): Promise<StepInResult>;

    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    on(
      request: 'stepOut',
      handler: (params: StepOutParams) => Promise<StepOutResult | Error>,
    ): () => void;
    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    stepOutRequest(params: StepOutParams): Promise<StepOutResult>;

    /**
     * The request starts the debuggee to run one step backwards.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    on(
      request: 'stepBack',
      handler: (params: StepBackParams) => Promise<StepBackResult | Error>,
    ): () => void;
    /**
     * The request starts the debuggee to run one step backwards.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    stepBackRequest(params: StepBackParams): Promise<StepBackResult>;

    /**
     * The request starts the debuggee to run backward.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    on(
      request: 'reverseContinue',
      handler: (params: ReverseContinueParams) => Promise<ReverseContinueResult | Error>,
    ): () => void;
    /**
     * The request starts the debuggee to run backward.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    reverseContinueRequest(params: ReverseContinueParams): Promise<ReverseContinueResult>;

    /**
     * The request restarts execution of the specified stackframe.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'restart') after the restart has completed.
     * Clients should only call this request if the capability 'supportsRestartFrame' is true.
     */
    on(
      request: 'restartFrame',
      handler: (params: RestartFrameParams) => Promise<RestartFrameResult | Error>,
    ): () => void;
    /**
     * The request restarts execution of the specified stackframe.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'restart') after the restart has completed.
     * Clients should only call this request if the capability 'supportsRestartFrame' is true.
     */
    restartFrameRequest(params: RestartFrameParams): Promise<RestartFrameResult>;

    /**
     * The request sets the location where the debuggee will continue to run.
     * This makes it possible to skip the execution of code or to executed code again.
     * The code between the current location and the goto target is not executed but skipped.
     * The debug adapter first sends the response and then a 'stopped' event with reason 'goto'.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true (because only then goto targets exist that can be passed as arguments).
     */
    on(request: 'goto', handler: (params: GotoParams) => Promise<GotoResult | Error>): () => void;
    /**
     * The request sets the location where the debuggee will continue to run.
     * This makes it possible to skip the execution of code or to executed code again.
     * The code between the current location and the goto target is not executed but skipped.
     * The debug adapter first sends the response and then a 'stopped' event with reason 'goto'.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true (because only then goto targets exist that can be passed as arguments).
     */
    gotoRequest(params: GotoParams): Promise<GotoResult>;

    /**
     * The request suspends the debuggee.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'pause') after the thread has been paused successfully.
     */
    on(
      request: 'pause',
      handler: (params: PauseParams) => Promise<PauseResult | Error>,
    ): () => void;
    /**
     * The request suspends the debuggee.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'pause') after the thread has been paused successfully.
     */
    pauseRequest(params: PauseParams): Promise<PauseResult>;

    /**
     * The request returns a stacktrace from the current execution state.
     */
    on(
      request: 'stackTrace',
      handler: (params: StackTraceParams) => Promise<StackTraceResult | Error>,
    ): () => void;
    /**
     * The request returns a stacktrace from the current execution state.
     */
    stackTraceRequest(params: StackTraceParams): Promise<StackTraceResult>;

    /**
     * The request returns the variable scopes for a given stackframe ID.
     */
    on(
      request: 'scopes',
      handler: (params: ScopesParams) => Promise<ScopesResult | Error>,
    ): () => void;
    /**
     * The request returns the variable scopes for a given stackframe ID.
     */
    scopesRequest(params: ScopesParams): Promise<ScopesResult>;

    /**
     * Retrieves all child variables for the given variable reference.
     * An optional filter can be used to limit the fetched children to either named or indexed children.
     */
    on(
      request: 'variables',
      handler: (params: VariablesParams) => Promise<VariablesResult | Error>,
    ): () => void;
    /**
     * Retrieves all child variables for the given variable reference.
     * An optional filter can be used to limit the fetched children to either named or indexed children.
     */
    variablesRequest(params: VariablesParams): Promise<VariablesResult>;

    /**
     * Set the variable with the given name in the variable container to a new value. Clients should only call this request if the capability 'supportsSetVariable' is true.
     */
    on(
      request: 'setVariable',
      handler: (params: SetVariableParams) => Promise<SetVariableResult | Error>,
    ): () => void;
    /**
     * Set the variable with the given name in the variable container to a new value. Clients should only call this request if the capability 'supportsSetVariable' is true.
     */
    setVariableRequest(params: SetVariableParams): Promise<SetVariableResult>;

    /**
     * The request retrieves the source code for a given source reference.
     */
    on(
      request: 'source',
      handler: (params: SourceParams) => Promise<SourceResult | Error>,
    ): () => void;
    /**
     * The request retrieves the source code for a given source reference.
     */
    sourceRequest(params: SourceParams): Promise<SourceResult>;

    /**
     * The request retrieves a list of all threads.
     */
    on(
      request: 'threads',
      handler: (params: ThreadsParams) => Promise<ThreadsResult | Error>,
    ): () => void;
    /**
     * The request retrieves a list of all threads.
     */
    threadsRequest(params: ThreadsParams): Promise<ThreadsResult>;

    /**
     * The request terminates the threads with the given ids.
     * Clients should only call this request if the capability 'supportsTerminateThreadsRequest' is true.
     */
    on(
      request: 'terminateThreads',
      handler: (params: TerminateThreadsParams) => Promise<TerminateThreadsResult | Error>,
    ): () => void;
    /**
     * The request terminates the threads with the given ids.
     * Clients should only call this request if the capability 'supportsTerminateThreadsRequest' is true.
     */
    terminateThreadsRequest(params: TerminateThreadsParams): Promise<TerminateThreadsResult>;

    /**
     * Modules can be retrieved from the debug adapter with this request which can either return all modules or a range of modules to support paging.
     * Clients should only call this request if the capability 'supportsModulesRequest' is true.
     */
    on(
      request: 'modules',
      handler: (params: ModulesParams) => Promise<ModulesResult | Error>,
    ): () => void;
    /**
     * Modules can be retrieved from the debug adapter with this request which can either return all modules or a range of modules to support paging.
     * Clients should only call this request if the capability 'supportsModulesRequest' is true.
     */
    modulesRequest(params: ModulesParams): Promise<ModulesResult>;

    /**
     * Retrieves the set of all sources currently loaded by the debugged process.
     * Clients should only call this request if the capability 'supportsLoadedSourcesRequest' is true.
     */
    on(
      request: 'loadedSources',
      handler: (params: LoadedSourcesParams) => Promise<LoadedSourcesResult | Error>,
    ): () => void;
    /**
     * Retrieves the set of all sources currently loaded by the debugged process.
     * Clients should only call this request if the capability 'supportsLoadedSourcesRequest' is true.
     */
    loadedSourcesRequest(params: LoadedSourcesParams): Promise<LoadedSourcesResult>;

    /**
     * Evaluates the given expression in the context of the top most stack frame.
     * The expression has access to any variables and arguments that are in scope.
     */
    on(
      request: 'evaluate',
      handler: (params: EvaluateParams) => Promise<EvaluateResult | Error>,
    ): () => void;
    /**
     * Evaluates the given expression in the context of the top most stack frame.
     * The expression has access to any variables and arguments that are in scope.
     */
    evaluateRequest(params: EvaluateParams): Promise<EvaluateResult>;

    /**
     * Evaluates the given 'value' expression and assigns it to the 'expression' which must be a modifiable l-value.
     * The expressions have access to any variables and arguments that are in scope of the specified frame.
     * Clients should only call this request if the capability 'supportsSetExpression' is true.
     */
    on(
      request: 'setExpression',
      handler: (params: SetExpressionParams) => Promise<SetExpressionResult | Error>,
    ): () => void;
    /**
     * Evaluates the given 'value' expression and assigns it to the 'expression' which must be a modifiable l-value.
     * The expressions have access to any variables and arguments that are in scope of the specified frame.
     * Clients should only call this request if the capability 'supportsSetExpression' is true.
     */
    setExpressionRequest(params: SetExpressionParams): Promise<SetExpressionResult>;

    /**
     * This request retrieves the possible stepIn targets for the specified stack frame.
     * These targets can be used in the 'stepIn' request.
     * The StepInTargets may only be called if the 'supportsStepInTargetsRequest' capability exists and is true.
     * Clients should only call this request if the capability 'supportsStepInTargetsRequest' is true.
     */
    on(
      request: 'stepInTargets',
      handler: (params: StepInTargetsParams) => Promise<StepInTargetsResult | Error>,
    ): () => void;
    /**
     * This request retrieves the possible stepIn targets for the specified stack frame.
     * These targets can be used in the 'stepIn' request.
     * The StepInTargets may only be called if the 'supportsStepInTargetsRequest' capability exists and is true.
     * Clients should only call this request if the capability 'supportsStepInTargetsRequest' is true.
     */
    stepInTargetsRequest(params: StepInTargetsParams): Promise<StepInTargetsResult>;

    /**
     * This request retrieves the possible goto targets for the specified source location.
     * These targets can be used in the 'goto' request.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true.
     */
    on(
      request: 'gotoTargets',
      handler: (params: GotoTargetsParams) => Promise<GotoTargetsResult | Error>,
    ): () => void;
    /**
     * This request retrieves the possible goto targets for the specified source location.
     * These targets can be used in the 'goto' request.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true.
     */
    gotoTargetsRequest(params: GotoTargetsParams): Promise<GotoTargetsResult>;

    /**
     * Returns a list of possible completions for a given caret position and text.
     * Clients should only call this request if the capability 'supportsCompletionsRequest' is true.
     */
    on(
      request: 'completions',
      handler: (params: CompletionsParams) => Promise<CompletionsResult | Error>,
    ): () => void;
    /**
     * Returns a list of possible completions for a given caret position and text.
     * Clients should only call this request if the capability 'supportsCompletionsRequest' is true.
     */
    completionsRequest(params: CompletionsParams): Promise<CompletionsResult>;

    /**
     * Retrieves the details of the exception that caused this event to be raised.
     * Clients should only call this request if the capability 'supportsExceptionInfoRequest' is true.
     */
    on(
      request: 'exceptionInfo',
      handler: (params: ExceptionInfoParams) => Promise<ExceptionInfoResult | Error>,
    ): () => void;
    /**
     * Retrieves the details of the exception that caused this event to be raised.
     * Clients should only call this request if the capability 'supportsExceptionInfoRequest' is true.
     */
    exceptionInfoRequest(params: ExceptionInfoParams): Promise<ExceptionInfoResult>;

    /**
     * Reads bytes from memory at the provided location.
     * Clients should only call this request if the capability 'supportsReadMemoryRequest' is true.
     */
    on(
      request: 'readMemory',
      handler: (params: ReadMemoryParams) => Promise<ReadMemoryResult | Error>,
    ): () => void;
    /**
     * Reads bytes from memory at the provided location.
     * Clients should only call this request if the capability 'supportsReadMemoryRequest' is true.
     */
    readMemoryRequest(params: ReadMemoryParams): Promise<ReadMemoryResult>;

    /**
     * Disassembles code stored at the provided location.
     * Clients should only call this request if the capability 'supportsDisassembleRequest' is true.
     */
    on(
      request: 'disassemble',
      handler: (params: DisassembleParams) => Promise<DisassembleResult | Error>,
    ): () => void;
    /**
     * Disassembles code stored at the provided location.
     * Clients should only call this request if the capability 'supportsDisassembleRequest' is true.
     */
    disassembleRequest(params: DisassembleParams): Promise<DisassembleResult>;

    /**
     * Enable custom breakpoints.
     */
    on(
      request: 'enableCustomBreakpoints',
      handler: (
        params: EnableCustomBreakpointsParams,
      ) => Promise<EnableCustomBreakpointsResult | Error>,
    ): () => void;
    /**
     * Enable custom breakpoints.
     */
    enableCustomBreakpointsRequest(
      params: EnableCustomBreakpointsParams,
    ): Promise<EnableCustomBreakpointsResult>;

    /**
     * Disable custom breakpoints.
     */
    on(
      request: 'disableCustomBreakpoints',
      handler: (
        params: DisableCustomBreakpointsParams,
      ) => Promise<DisableCustomBreakpointsResult | Error>,
    ): () => void;
    /**
     * Disable custom breakpoints.
     */
    disableCustomBreakpointsRequest(
      params: DisableCustomBreakpointsParams,
    ): Promise<DisableCustomBreakpointsResult>;

    /**
     * Returns whether particular source can be pretty-printed.
     */
    on(
      request: 'canPrettyPrintSource',
      handler: (params: CanPrettyPrintSourceParams) => Promise<CanPrettyPrintSourceResult | Error>,
    ): () => void;
    /**
     * Returns whether particular source can be pretty-printed.
     */
    canPrettyPrintSourceRequest(
      params: CanPrettyPrintSourceParams,
    ): Promise<CanPrettyPrintSourceResult>;

    /**
     * Pretty prints source for debugging.
     */
    on(
      request: 'prettyPrintSource',
      handler: (params: PrettyPrintSourceParams) => Promise<PrettyPrintSourceResult | Error>,
    ): () => void;
    /**
     * Pretty prints source for debugging.
     */
    prettyPrintSourceRequest(params: PrettyPrintSourceParams): Promise<PrettyPrintSourceResult>;

    /**
     * Toggle skip status of file.
     */
    on(
      request: 'toggleSkipFileStatus',
      handler: (params: ToggleSkipFileStatusParams) => Promise<ToggleSkipFileStatusResult | Error>,
    ): () => void;
    /**
     * Toggle skip status of file.
     */
    toggleSkipFileStatusRequest(
      params: ToggleSkipFileStatusParams,
    ): Promise<ToggleSkipFileStatusResult>;

    /**
     * A request to reveal a certain location in the UI.
     */
    revealLocationRequested(params: RevealLocationRequestedEventParams): void;

    /**
     * A request to copy a certain string to clipboard.
     */
    copyRequested(params: CopyRequestedEventParams): void;

    /**
     * An event sent when breakpoint prediction takes a significant amount of time.
     */
    longPrediction(params: LongPredictionEventParams): void;

    /**
     * Enable custom breakpoints.
     */
    launchBrowserInCompanion(params: LaunchBrowserInCompanionEventParams): void;

    /**
     * Enable custom breakpoints.
     */
    killCompanionBrowser(params: KillCompanionBrowserEventParams): void;

    /**
     * Starts taking a profile of the target.
     */
    on(
      request: 'startProfile',
      handler: (params: StartProfileParams) => Promise<StartProfileResult | Error>,
    ): () => void;
    /**
     * Starts taking a profile of the target.
     */
    startProfileRequest(params: StartProfileParams): Promise<StartProfileResult>;

    /**
     * Stops a running profile.
     */
    on(
      request: 'stopProfile',
      handler: (params: StopProfileParams) => Promise<StopProfileResult | Error>,
    ): () => void;
    /**
     * Stops a running profile.
     */
    stopProfileRequest(params: StopProfileParams): Promise<StopProfileResult>;

    /**
     * Fired when a profiling state changes.
     */
    profileStarted(params: ProfileStartedEventParams): void;

    /**
     * Fired when a profiling state changes.
     */
    profilerStateUpdate(params: ProfilerStateUpdateEventParams): void;

    /**
     * Launches a VS Code extension host in debug mode.
     */
    on(
      request: 'launchVSCode',
      handler: (params: LaunchVSCodeParams) => Promise<LaunchVSCodeResult | Error>,
    ): () => void;
    /**
     * Launches a VS Code extension host in debug mode.
     */
    launchVSCodeRequest(params: LaunchVSCodeParams): Promise<LaunchVSCodeResult>;

    /**
     * Launches Chrome unelevated, used in VS.
     */
    on(
      request: 'launchUnelevated',
      handler: (params: LaunchUnelevatedParams) => Promise<LaunchUnelevatedResult | Error>,
    ): () => void;
    /**
     * Launches Chrome unelevated, used in VS.
     */
    launchUnelevatedRequest(params: LaunchUnelevatedParams): Promise<LaunchUnelevatedResult>;

    /**
     * Gets all defined breakpoints.
     */
    on(
      request: 'getBreakpoints',
      handler: (params: GetBreakpointsParams) => Promise<GetBreakpointsResult | Error>,
    ): () => void;
    /**
     * Gets all defined breakpoints.
     */
    getBreakpointsRequest(params: GetBreakpointsParams): Promise<GetBreakpointsResult>;

    /**
     * Gets all defined breakpoints.
     */
    on(
      request: 'revealPage',
      handler: (params: RevealPageParams) => Promise<RevealPageResult | Error>,
    ): () => void;
    /**
     * Gets all defined breakpoints.
     */
    revealPageRequest(params: RevealPageParams): Promise<RevealPageResult>;

    /**
     * Starts profiling the extension itself. Used by VS.
     */
    on(
      request: 'startSelfProfile',
      handler: (params: StartSelfProfileParams) => Promise<StartSelfProfileResult | Error>,
    ): () => void;
    /**
     * Starts profiling the extension itself. Used by VS.
     */
    startSelfProfileRequest(params: StartSelfProfileParams): Promise<StartSelfProfileResult>;

    /**
     * Stops profiling the extension itself. Used by VS.
     */
    on(
      request: 'stopSelfProfile',
      handler: (params: StopSelfProfileParams) => Promise<StopSelfProfileResult | Error>,
    ): () => void;
    /**
     * Stops profiling the extension itself. Used by VS.
     */
    stopSelfProfileRequest(params: StopSelfProfileParams): Promise<StopSelfProfileResult>;
  }

  export interface TestApi {
    /**
     * The 'cancel' request is used by the frontend in two situations:
     * - to indicate that it is no longer interested in the result produced by a specific request issued earlier
     * - to cancel a progress sequence. Clients should only call this request if the capability 'supportsCancelRequest' is true.
     * This request has a hint characteristic: a debug adapter can only be expected to make a 'best effort' in honouring this request but there are no guarantees.
     * The 'cancel' request may return an error if it could not cancel an operation but a frontend should refrain from presenting this error to end users.
     * A frontend client should only call this request if the capability 'supportsCancelRequest' is true.
     * The request that got canceled still needs to send a response back. This can either be a normal result ('success' attribute true)
     * or an error response ('success' attribute false and the 'message' set to 'cancelled').
     * Returning partial results from a cancelled request is possible but please note that a frontend client has no generic way for detecting that a response is partial or not.
     *  The progress that got cancelled still needs to send a 'progressEnd' event back.
     *  A client should not assume that progress just got cancelled after sending the 'cancel' request.
     */
    cancel(params: CancelParams): Promise<CancelResult>;

    /**
     * This event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).
     * A debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the 'initialize' request has finished).
     * The sequence of events/requests is as follows:
     * - adapters sends 'initialized' event (after the 'initialize' request has returned)
     * - frontend sends zero or more 'setBreakpoints' requests
     * - frontend sends one 'setFunctionBreakpoints' request (if capability 'supportsFunctionBreakpoints' is true)
     * - frontend sends a 'setExceptionBreakpoints' request if one or more 'exceptionBreakpointFilters' have been defined (or if 'supportsConfigurationDoneRequest' is not defined or false)
     * - frontend sends other future configuration requests
     * - frontend sends one 'configurationDone' request to indicate the end of the configuration.
     */
    on(request: 'initialized', handler: (params: InitializedEventParams) => void): void;
    off(request: 'initialized', handler: (params: InitializedEventParams) => void): void;
    once(
      request: 'initialized',
      filter?: (event: InitializedEventParams) => boolean,
    ): Promise<InitializedEventParams>;

    /**
     * The event indicates that the execution of the debuggee has stopped due to some condition.
     * This can be caused by a break point previously set, a stepping request has completed, by executing a debugger statement etc.
     */
    on(request: 'stopped', handler: (params: StoppedEventParams) => void): void;
    off(request: 'stopped', handler: (params: StoppedEventParams) => void): void;
    once(
      request: 'stopped',
      filter?: (event: StoppedEventParams) => boolean,
    ): Promise<StoppedEventParams>;

    /**
     * The event indicates that the execution of the debuggee has continued.
     * Please note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. 'launch' or 'continue'.
     * It is only necessary to send a 'continued' event if there was no previous request that implied this.
     */
    on(request: 'continued', handler: (params: ContinuedEventParams) => void): void;
    off(request: 'continued', handler: (params: ContinuedEventParams) => void): void;
    once(
      request: 'continued',
      filter?: (event: ContinuedEventParams) => boolean,
    ): Promise<ContinuedEventParams>;

    /**
     * The event indicates that the debuggee has exited and returns its exit code.
     */
    on(request: 'exited', handler: (params: ExitedEventParams) => void): void;
    off(request: 'exited', handler: (params: ExitedEventParams) => void): void;
    once(
      request: 'exited',
      filter?: (event: ExitedEventParams) => boolean,
    ): Promise<ExitedEventParams>;

    /**
     * The event indicates that debugging of the debuggee has terminated. This does **not** mean that the debuggee itself has exited.
     */
    on(request: 'terminated', handler: (params: TerminatedEventParams) => void): void;
    off(request: 'terminated', handler: (params: TerminatedEventParams) => void): void;
    once(
      request: 'terminated',
      filter?: (event: TerminatedEventParams) => boolean,
    ): Promise<TerminatedEventParams>;

    /**
     * The event indicates that a thread has started or exited.
     */
    on(request: 'thread', handler: (params: ThreadEventParams) => void): void;
    off(request: 'thread', handler: (params: ThreadEventParams) => void): void;
    once(
      request: 'thread',
      filter?: (event: ThreadEventParams) => boolean,
    ): Promise<ThreadEventParams>;

    /**
     * The event indicates that the target has produced some output.
     */
    on(request: 'output', handler: (params: OutputEventParams) => void): void;
    off(request: 'output', handler: (params: OutputEventParams) => void): void;
    once(
      request: 'output',
      filter?: (event: OutputEventParams) => boolean,
    ): Promise<OutputEventParams>;

    /**
     * The event indicates that some information about a breakpoint has changed.
     */
    on(request: 'breakpoint', handler: (params: BreakpointEventParams) => void): void;
    off(request: 'breakpoint', handler: (params: BreakpointEventParams) => void): void;
    once(
      request: 'breakpoint',
      filter?: (event: BreakpointEventParams) => boolean,
    ): Promise<BreakpointEventParams>;

    /**
     * The event indicates that some information about a module has changed.
     */
    on(request: 'module', handler: (params: ModuleEventParams) => void): void;
    off(request: 'module', handler: (params: ModuleEventParams) => void): void;
    once(
      request: 'module',
      filter?: (event: ModuleEventParams) => boolean,
    ): Promise<ModuleEventParams>;

    /**
     * The event indicates that some source has been added, changed, or removed from the set of all loaded sources.
     */
    on(request: 'loadedSource', handler: (params: LoadedSourceEventParams) => void): void;
    off(request: 'loadedSource', handler: (params: LoadedSourceEventParams) => void): void;
    once(
      request: 'loadedSource',
      filter?: (event: LoadedSourceEventParams) => boolean,
    ): Promise<LoadedSourceEventParams>;

    /**
     * The event indicates that the debugger has begun debugging a new process. Either one that it has launched, or one that it has attached to.
     */
    on(request: 'process', handler: (params: ProcessEventParams) => void): void;
    off(request: 'process', handler: (params: ProcessEventParams) => void): void;
    once(
      request: 'process',
      filter?: (event: ProcessEventParams) => boolean,
    ): Promise<ProcessEventParams>;

    /**
     * The event indicates that one or more capabilities have changed.
     * Since the capabilities are dependent on the frontend and its UI, it might not be possible to change that at random times (or too late).
     * Consequently this event has a hint characteristic: a frontend can only be expected to make a 'best effort' in honouring individual capabilities but there are no guarantees.
     * Only changed capabilities need to be included, all other capabilities keep their values.
     */
    on(request: 'capabilities', handler: (params: CapabilitiesEventParams) => void): void;
    off(request: 'capabilities', handler: (params: CapabilitiesEventParams) => void): void;
    once(
      request: 'capabilities',
      filter?: (event: CapabilitiesEventParams) => boolean,
    ): Promise<CapabilitiesEventParams>;

    /**
     * The event signals that a long running operation is about to start and
     * provides additional information for the client to set up a corresponding progress and cancellation UI.
     * The client is free to delay the showing of the UI in order to reduce flicker.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    on(request: 'progressStart', handler: (params: ProgressStartEventParams) => void): void;
    off(request: 'progressStart', handler: (params: ProgressStartEventParams) => void): void;
    once(
      request: 'progressStart',
      filter?: (event: ProgressStartEventParams) => boolean,
    ): Promise<ProgressStartEventParams>;

    /**
     * The event signals that the progress reporting needs to updated with a new message and/or percentage.
     * The client does not have to update the UI immediately, but the clients needs to keep track of the message and/or percentage values.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    on(request: 'progressUpdate', handler: (params: ProgressUpdateEventParams) => void): void;
    off(request: 'progressUpdate', handler: (params: ProgressUpdateEventParams) => void): void;
    once(
      request: 'progressUpdate',
      filter?: (event: ProgressUpdateEventParams) => boolean,
    ): Promise<ProgressUpdateEventParams>;

    /**
     * The event signals the end of the progress reporting with an optional final message.
     * This event should only be sent if the client has passed the value true for the 'supportsProgressReporting' capability of the 'initialize' request.
     */
    on(request: 'progressEnd', handler: (params: ProgressEndEventParams) => void): void;
    off(request: 'progressEnd', handler: (params: ProgressEndEventParams) => void): void;
    once(
      request: 'progressEnd',
      filter?: (event: ProgressEndEventParams) => boolean,
    ): Promise<ProgressEndEventParams>;

    /**
     * This optional request is sent from the debug adapter to the client to run a command in a terminal.
     * This is typically used to launch the debuggee in a terminal provided by the client.
     * This request should only be called if the client has passed the value true for the 'supportsRunInTerminalRequest' capability of the 'initialize' request.
     */
    runInTerminal(params: RunInTerminalParams): Promise<RunInTerminalResult>;

    /**
     * The 'initialize' request is sent as the first request from the client to the debug adapter
     * in order to configure it with client capabilities and to retrieve capabilities from the debug adapter.
     * Until the debug adapter has responded to with an 'initialize' response, the client must not send any additional requests or events to the debug adapter.
     * In addition the debug adapter is not allowed to send any requests or events to the client until it has responded with an 'initialize' response.
     * The 'initialize' request may only be sent once.
     */
    initialize(params: InitializeParams): Promise<InitializeResult>;

    /**
     * This optional request indicates that the client has finished initialization of the debug adapter.
     * So it is the last request in the sequence of configuration requests (which was started by the 'initialized' event).
     * Clients should only call this request if the capability 'supportsConfigurationDoneRequest' is true.
     */
    configurationDone(params: ConfigurationDoneParams): Promise<ConfigurationDoneResult>;

    /**
     * This launch request is sent from the client to the debug adapter to start the debuggee with or without debugging (if 'noDebug' is true).
     * Since launching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    launch(params: LaunchParams): Promise<LaunchResult>;

    /**
     * The attach request is sent from the client to the debug adapter to attach to a debuggee that is already running.
     * Since attaching is debugger/runtime specific, the arguments for this request are not part of this specification.
     */
    attach(params: AttachParams): Promise<AttachResult>;

    /**
     * Restarts a debug session. Clients should only call this request if the capability 'supportsRestartRequest' is true.
     * If the capability is missing or has the value false, a typical client will emulate 'restart' by terminating the debug adapter first and then launching it anew.
     */
    restart(params: RestartParams): Promise<RestartResult>;

    /**
     * The 'disconnect' request is sent from the client to the debug adapter in order to stop debugging.
     * It asks the debug adapter to disconnect from the debuggee and to terminate the debug adapter.
     * If the debuggee has been started with the 'launch' request, the 'disconnect' request terminates the debuggee.
     * If the 'attach' request was used to connect to the debuggee, 'disconnect' does not terminate the debuggee.
     * This behavior can be controlled with the 'terminateDebuggee' argument (if supported by the debug adapter).
     */
    disconnect(params: DisconnectParams): Promise<DisconnectResult>;

    /**
     * The 'terminate' request is sent from the client to the debug adapter in order to give the debuggee a chance for terminating itself.
     * Clients should only call this request if the capability 'supportsTerminateRequest' is true.
     */
    terminate(params: TerminateParams): Promise<TerminateResult>;

    /**
     * The 'breakpointLocations' request returns all possible locations for source breakpoints in a given range.
     * Clients should only call this request if the capability 'supportsBreakpointLocationsRequest' is true.
     */
    breakpointLocations(params: BreakpointLocationsParams): Promise<BreakpointLocationsResult>;

    /**
     * Sets multiple breakpoints for a single source and clears all previous breakpoints in that source.
     * To clear all breakpoint for a source, specify an empty array.
     * When a breakpoint is hit, a 'stopped' event (with reason 'breakpoint') is generated.
     */
    setBreakpoints(params: SetBreakpointsParams): Promise<SetBreakpointsResult>;

    /**
     * Replaces all existing function breakpoints with new function breakpoints.
     * To clear all function breakpoints, specify an empty array.
     * When a function breakpoint is hit, a 'stopped' event (with reason 'function breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsFunctionBreakpoints' is true.
     */
    setFunctionBreakpoints(
      params: SetFunctionBreakpointsParams,
    ): Promise<SetFunctionBreakpointsResult>;

    /**
     * The request configures the debuggers response to thrown exceptions.
     * If an exception is configured to break, a 'stopped' event is fired (with reason 'exception').
     * Clients should only call this request if the capability 'exceptionBreakpointFilters' returns one or more filters.
     */
    setExceptionBreakpoints(
      params: SetExceptionBreakpointsParams,
    ): Promise<SetExceptionBreakpointsResult>;

    /**
     * Obtains information on a possible data breakpoint that could be set on an expression or variable.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    dataBreakpointInfo(params: DataBreakpointInfoParams): Promise<DataBreakpointInfoResult>;

    /**
     * Replaces all existing data breakpoints with new data breakpoints.
     * To clear all data breakpoints, specify an empty array.
     * When a data breakpoint is hit, a 'stopped' event (with reason 'data breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsDataBreakpoints' is true.
     */
    setDataBreakpoints(params: SetDataBreakpointsParams): Promise<SetDataBreakpointsResult>;

    /**
     * Replaces all existing instruction breakpoints. Typically, instruction breakpoints would be set from a diassembly window.
     * To clear all instruction breakpoints, specify an empty array.
     * When an instruction breakpoint is hit, a 'stopped' event (with reason 'instruction breakpoint') is generated.
     * Clients should only call this request if the capability 'supportsInstructionBreakpoints' is true.
     */
    setInstructionBreakpoints(
      params: SetInstructionBreakpointsParams,
    ): Promise<SetInstructionBreakpointsResult>;

    /**
     * The request starts the debuggee to run again.
     */
    continue(params: ContinueParams): Promise<ContinueResult>;

    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    next(params: NextParams): Promise<NextResult>;

    /**
     * The request starts the debuggee to step into a function/method if possible.
     * If it cannot step into a target, 'stepIn' behaves like 'next'.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * If there are multiple function/method calls (or other targets) on the source line,
     * the optional argument 'targetId' can be used to control into which target the 'stepIn' should occur.
     * The list of possible targets for a given source line can be retrieved via the 'stepInTargets' request.
     */
    stepIn(params: StepInParams): Promise<StepInResult>;

    /**
     * The request starts the debuggee to run again for one step.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     */
    stepOut(params: StepOutParams): Promise<StepOutResult>;

    /**
     * The request starts the debuggee to run one step backwards.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'step') after the step has completed.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    stepBack(params: StepBackParams): Promise<StepBackResult>;

    /**
     * The request starts the debuggee to run backward.
     * Clients should only call this request if the capability 'supportsStepBack' is true.
     */
    reverseContinue(params: ReverseContinueParams): Promise<ReverseContinueResult>;

    /**
     * The request restarts execution of the specified stackframe.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'restart') after the restart has completed.
     * Clients should only call this request if the capability 'supportsRestartFrame' is true.
     */
    restartFrame(params: RestartFrameParams): Promise<RestartFrameResult>;

    /**
     * The request sets the location where the debuggee will continue to run.
     * This makes it possible to skip the execution of code or to executed code again.
     * The code between the current location and the goto target is not executed but skipped.
     * The debug adapter first sends the response and then a 'stopped' event with reason 'goto'.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true (because only then goto targets exist that can be passed as arguments).
     */
    goto(params: GotoParams): Promise<GotoResult>;

    /**
     * The request suspends the debuggee.
     * The debug adapter first sends the response and then a 'stopped' event (with reason 'pause') after the thread has been paused successfully.
     */
    pause(params: PauseParams): Promise<PauseResult>;

    /**
     * The request returns a stacktrace from the current execution state.
     */
    stackTrace(params: StackTraceParams): Promise<StackTraceResult>;

    /**
     * The request returns the variable scopes for a given stackframe ID.
     */
    scopes(params: ScopesParams): Promise<ScopesResult>;

    /**
     * Retrieves all child variables for the given variable reference.
     * An optional filter can be used to limit the fetched children to either named or indexed children.
     */
    variables(params: VariablesParams): Promise<VariablesResult>;

    /**
     * Set the variable with the given name in the variable container to a new value. Clients should only call this request if the capability 'supportsSetVariable' is true.
     */
    setVariable(params: SetVariableParams): Promise<SetVariableResult>;

    /**
     * The request retrieves the source code for a given source reference.
     */
    source(params: SourceParams): Promise<SourceResult>;

    /**
     * The request retrieves a list of all threads.
     */
    threads(params: ThreadsParams): Promise<ThreadsResult>;

    /**
     * The request terminates the threads with the given ids.
     * Clients should only call this request if the capability 'supportsTerminateThreadsRequest' is true.
     */
    terminateThreads(params: TerminateThreadsParams): Promise<TerminateThreadsResult>;

    /**
     * Modules can be retrieved from the debug adapter with this request which can either return all modules or a range of modules to support paging.
     * Clients should only call this request if the capability 'supportsModulesRequest' is true.
     */
    modules(params: ModulesParams): Promise<ModulesResult>;

    /**
     * Retrieves the set of all sources currently loaded by the debugged process.
     * Clients should only call this request if the capability 'supportsLoadedSourcesRequest' is true.
     */
    loadedSources(params: LoadedSourcesParams): Promise<LoadedSourcesResult>;

    /**
     * Evaluates the given expression in the context of the top most stack frame.
     * The expression has access to any variables and arguments that are in scope.
     */
    evaluate(params: EvaluateParams): Promise<EvaluateResult>;

    /**
     * Evaluates the given 'value' expression and assigns it to the 'expression' which must be a modifiable l-value.
     * The expressions have access to any variables and arguments that are in scope of the specified frame.
     * Clients should only call this request if the capability 'supportsSetExpression' is true.
     */
    setExpression(params: SetExpressionParams): Promise<SetExpressionResult>;

    /**
     * This request retrieves the possible stepIn targets for the specified stack frame.
     * These targets can be used in the 'stepIn' request.
     * The StepInTargets may only be called if the 'supportsStepInTargetsRequest' capability exists and is true.
     * Clients should only call this request if the capability 'supportsStepInTargetsRequest' is true.
     */
    stepInTargets(params: StepInTargetsParams): Promise<StepInTargetsResult>;

    /**
     * This request retrieves the possible goto targets for the specified source location.
     * These targets can be used in the 'goto' request.
     * Clients should only call this request if the capability 'supportsGotoTargetsRequest' is true.
     */
    gotoTargets(params: GotoTargetsParams): Promise<GotoTargetsResult>;

    /**
     * Returns a list of possible completions for a given caret position and text.
     * Clients should only call this request if the capability 'supportsCompletionsRequest' is true.
     */
    completions(params: CompletionsParams): Promise<CompletionsResult>;

    /**
     * Retrieves the details of the exception that caused this event to be raised.
     * Clients should only call this request if the capability 'supportsExceptionInfoRequest' is true.
     */
    exceptionInfo(params: ExceptionInfoParams): Promise<ExceptionInfoResult>;

    /**
     * Reads bytes from memory at the provided location.
     * Clients should only call this request if the capability 'supportsReadMemoryRequest' is true.
     */
    readMemory(params: ReadMemoryParams): Promise<ReadMemoryResult>;

    /**
     * Disassembles code stored at the provided location.
     * Clients should only call this request if the capability 'supportsDisassembleRequest' is true.
     */
    disassemble(params: DisassembleParams): Promise<DisassembleResult>;

    /**
     * Enable custom breakpoints.
     */
    enableCustomBreakpoints(
      params: EnableCustomBreakpointsParams,
    ): Promise<EnableCustomBreakpointsResult>;

    /**
     * Disable custom breakpoints.
     */
    disableCustomBreakpoints(
      params: DisableCustomBreakpointsParams,
    ): Promise<DisableCustomBreakpointsResult>;

    /**
     * Returns whether particular source can be pretty-printed.
     */
    canPrettyPrintSource(params: CanPrettyPrintSourceParams): Promise<CanPrettyPrintSourceResult>;

    /**
     * Pretty prints source for debugging.
     */
    prettyPrintSource(params: PrettyPrintSourceParams): Promise<PrettyPrintSourceResult>;

    /**
     * Toggle skip status of file.
     */
    toggleSkipFileStatus(params: ToggleSkipFileStatusParams): Promise<ToggleSkipFileStatusResult>;

    /**
     * A request to reveal a certain location in the UI.
     */
    on(
      request: 'revealLocationRequested',
      handler: (params: RevealLocationRequestedEventParams) => void,
    ): void;
    off(
      request: 'revealLocationRequested',
      handler: (params: RevealLocationRequestedEventParams) => void,
    ): void;
    once(
      request: 'revealLocationRequested',
      filter?: (event: RevealLocationRequestedEventParams) => boolean,
    ): Promise<RevealLocationRequestedEventParams>;

    /**
     * A request to copy a certain string to clipboard.
     */
    on(request: 'copyRequested', handler: (params: CopyRequestedEventParams) => void): void;
    off(request: 'copyRequested', handler: (params: CopyRequestedEventParams) => void): void;
    once(
      request: 'copyRequested',
      filter?: (event: CopyRequestedEventParams) => boolean,
    ): Promise<CopyRequestedEventParams>;

    /**
     * An event sent when breakpoint prediction takes a significant amount of time.
     */
    on(request: 'longPrediction', handler: (params: LongPredictionEventParams) => void): void;
    off(request: 'longPrediction', handler: (params: LongPredictionEventParams) => void): void;
    once(
      request: 'longPrediction',
      filter?: (event: LongPredictionEventParams) => boolean,
    ): Promise<LongPredictionEventParams>;

    /**
     * Enable custom breakpoints.
     */
    on(
      request: 'launchBrowserInCompanion',
      handler: (params: LaunchBrowserInCompanionEventParams) => void,
    ): void;
    off(
      request: 'launchBrowserInCompanion',
      handler: (params: LaunchBrowserInCompanionEventParams) => void,
    ): void;
    once(
      request: 'launchBrowserInCompanion',
      filter?: (event: LaunchBrowserInCompanionEventParams) => boolean,
    ): Promise<LaunchBrowserInCompanionEventParams>;

    /**
     * Enable custom breakpoints.
     */
    on(
      request: 'killCompanionBrowser',
      handler: (params: KillCompanionBrowserEventParams) => void,
    ): void;
    off(
      request: 'killCompanionBrowser',
      handler: (params: KillCompanionBrowserEventParams) => void,
    ): void;
    once(
      request: 'killCompanionBrowser',
      filter?: (event: KillCompanionBrowserEventParams) => boolean,
    ): Promise<KillCompanionBrowserEventParams>;

    /**
     * Starts taking a profile of the target.
     */
    startProfile(params: StartProfileParams): Promise<StartProfileResult>;

    /**
     * Stops a running profile.
     */
    stopProfile(params: StopProfileParams): Promise<StopProfileResult>;

    /**
     * Fired when a profiling state changes.
     */
    on(request: 'profileStarted', handler: (params: ProfileStartedEventParams) => void): void;
    off(request: 'profileStarted', handler: (params: ProfileStartedEventParams) => void): void;
    once(
      request: 'profileStarted',
      filter?: (event: ProfileStartedEventParams) => boolean,
    ): Promise<ProfileStartedEventParams>;

    /**
     * Fired when a profiling state changes.
     */
    on(
      request: 'profilerStateUpdate',
      handler: (params: ProfilerStateUpdateEventParams) => void,
    ): void;
    off(
      request: 'profilerStateUpdate',
      handler: (params: ProfilerStateUpdateEventParams) => void,
    ): void;
    once(
      request: 'profilerStateUpdate',
      filter?: (event: ProfilerStateUpdateEventParams) => boolean,
    ): Promise<ProfilerStateUpdateEventParams>;

    /**
     * Launches a VS Code extension host in debug mode.
     */
    launchVSCode(params: LaunchVSCodeParams): Promise<LaunchVSCodeResult>;

    /**
     * Launches Chrome unelevated, used in VS.
     */
    launchUnelevated(params: LaunchUnelevatedParams): Promise<LaunchUnelevatedResult>;

    /**
     * Gets all defined breakpoints.
     */
    getBreakpoints(params: GetBreakpointsParams): Promise<GetBreakpointsResult>;

    /**
     * Gets all defined breakpoints.
     */
    revealPage(params: RevealPageParams): Promise<RevealPageResult>;

    /**
     * Starts profiling the extension itself. Used by VS.
     */
    startSelfProfile(params: StartSelfProfileParams): Promise<StartSelfProfileResult>;

    /**
     * Stops profiling the extension itself. Used by VS.
     */
    stopSelfProfile(params: StopSelfProfileParams): Promise<StopSelfProfileResult>;
  }

  export interface AttachParams {
    /**
     * Optional data from the previous, restarted session.
     * The data is sent as the 'restart' attribute of the 'terminated' event.
     * The client should leave the data intact.
     */
    __restart?: any[] | boolean | integer | null | number | object | string;
  }

  export interface AttachResult {}

  export interface BreakpointEventParams {
    /**
     * The reason for the event.
     */
    reason: 'changed' | 'new' | 'removed';

    /**
     * The 'id' attribute is used to find the target breakpoint and the other attributes are used as the new values.
     */
    breakpoint: Breakpoint;
  }

  export interface BreakpointLocationsParams {
    /**
     * The source location of the breakpoints; either 'source.path' or 'source.reference' must be specified.
     */
    source: Source;

    /**
     * Start line of range to search possible breakpoint locations in. If only the line is specified, the request returns all possible locations in that line.
     */
    line: integer;

    /**
     * Optional start column of range to search possible breakpoint locations in. If no start column is given, the first column in the start line is assumed.
     */
    column?: integer;

    /**
     * Optional end line of range to search possible breakpoint locations in. If no end line is given, then the end line is assumed to be the start line.
     */
    endLine?: integer;

    /**
     * Optional end column of range to search possible breakpoint locations in. If no end column is given, then it is assumed to be in the last column of the end line.
     */
    endColumn?: integer;
  }

  export interface BreakpointLocationsResult {
    /**
     * Sorted set of possible breakpoint locations.
     */
    breakpoints: BreakpointLocation[];
  }

  export interface CanPrettyPrintSourceParams {
    /**
     * Source to be pretty printed.
     */
    source: Source;
  }

  export interface CanPrettyPrintSourceResult {
    /**
     * Whether source can be pretty printed.
     */
    canPrettyPrint: boolean;
  }

  export interface CancelParams {
    /**
     * The ID (attribute 'seq') of the request to cancel. If missing no request is cancelled.
     * Both a 'requestId' and a 'progressId' can be specified in one request.
     */
    requestId?: integer;

    /**
     * The ID (attribute 'progressId') of the progress to cancel. If missing no progress is cancelled.
     * Both a 'requestId' and a 'progressId' can be specified in one request.
     */
    progressId?: string;
  }

  export interface CancelResult {}

  export interface CapabilitiesEventParams {
    /**
     * The set of updated capabilities.
     */
    capabilities: Capabilities;
  }

  export interface CompletionsParams {
    /**
     * Returns completions in the scope of this stack frame. If not specified, the completions are returned for the global scope.
     */
    frameId?: integer;

    /**
     * One or more source lines. Typically this is the text a user has typed into the debug console before he asked for completion.
     */
    text: string;

    /**
     * The character position for which to determine the completion proposals.
     */
    column: integer;

    /**
     * An optional line for which to determine the completion proposals. If missing the first line of the text is assumed.
     */
    line?: integer;
  }

  export interface CompletionsResult {
    /**
     * The possible completions for .
     */
    targets: CompletionItem[];
  }

  export interface ConfigurationDoneParams {}

  export interface ConfigurationDoneResult {}

  export interface ContinueParams {
    /**
     * Continue execution for the specified thread (if possible).
     * If the backend cannot continue on a single thread but will continue on all threads, it should set the 'allThreadsContinued' attribute in the response to true.
     */
    threadId: integer;
  }

  export interface ContinueResult {
    /**
     * If true, the 'continue' request has ignored the specified thread and continued all threads instead.
     * If this attribute is missing a value of 'true' is assumed for backward compatibility.
     */
    allThreadsContinued?: boolean;
  }

  export interface ContinuedEventParams {
    /**
     * The thread which was continued.
     */
    threadId: integer;

    /**
     * If 'allThreadsContinued' is true, a debug adapter can announce that all threads have continued.
     */
    allThreadsContinued?: boolean;
  }

  export interface CopyRequestedEventParams {
    /**
     * Text to copy.
     */
    text: string;
  }

  export interface DataBreakpointInfoParams {
    /**
     * Reference to the Variable container if the data breakpoint is requested for a child of the container.
     */
    variablesReference?: integer;

    /**
     * The name of the Variable's child to obtain data breakpoint information for.
     * If variableReference isn’t provided, this can be an expression.
     */
    name: string;
  }

  export interface DataBreakpointInfoResult {
    /**
     * An identifier for the data on which a data breakpoint can be registered with the setDataBreakpoints request or null if no data breakpoint is available.
     */
    dataId: string | null;

    /**
     * UI string that describes on what data the breakpoint is set on or why a data breakpoint is not available.
     */
    description: string;

    /**
     * Optional attribute listing the available access types for a potential data breakpoint. A UI frontend could surface this information.
     */
    accessTypes?: DataBreakpointAccessType[];

    /**
     * Optional attribute indicating that a potential data breakpoint could be persisted across sessions.
     */
    canPersist?: boolean;
  }

  export interface DisableCustomBreakpointsParams {
    /**
     * Id of breakpoints to disable.
     */
    ids: string[];
  }

  export interface DisableCustomBreakpointsResult {}

  export interface DisassembleParams {
    /**
     * Memory reference to the base location containing the instructions to disassemble.
     */
    memoryReference: string;

    /**
     * Optional offset (in bytes) to be applied to the reference location before disassembling. Can be negative.
     */
    offset?: integer;

    /**
     * Optional offset (in instructions) to be applied after the byte offset (if any) before disassembling. Can be negative.
     */
    instructionOffset?: integer;

    /**
     * Number of instructions to disassemble starting at the specified location and offset.
     * An adapter must return exactly this number of instructions - any unavailable instructions should be replaced with an implementation-defined 'invalid instruction' value.
     */
    instructionCount: integer;

    /**
     * If true, the adapter should attempt to resolve memory addresses and other values to symbolic names.
     */
    resolveSymbols?: boolean;
  }

  export interface DisassembleResult {
    /**
     * The list of disassembled instructions.
     */
    instructions: DisassembledInstruction[];
  }

  export interface DisconnectParams {
    /**
     * A value of true indicates that this 'disconnect' request is part of a restart sequence.
     */
    restart?: boolean;

    /**
     * Indicates whether the debuggee should be terminated when the debugger is disconnected.
     * If unspecified, the debug adapter is free to do whatever it thinks is best.
     * The attribute is only honored by a debug adapter if the capability 'supportTerminateDebuggee' is true.
     */
    terminateDebuggee?: boolean;
  }

  export interface DisconnectResult {}

  export interface EnableCustomBreakpointsParams {
    /**
     * Id of breakpoints to enable.
     */
    ids: string[];
  }

  export interface EnableCustomBreakpointsResult {}

  export interface EvaluateParams {
    /**
     * The expression to evaluate.
     */
    expression: string;

    /**
     * Evaluate the expression in the scope of this stack frame. If not specified, the expression is evaluated in the global scope.
     */
    frameId?: integer;

    /**
     * The context in which the evaluate request is run.
     */
    context?: 'watch' | 'repl' | 'hover' | 'clipboard';

    /**
     * Specifies details on how to format the Evaluate result.
     * The attribute is only honored by a debug adapter if the capability 'supportsValueFormattingOptions' is true.
     */
    format?: ValueFormat;
  }

  export interface EvaluateResult {
    /**
     * The result of the evaluate request.
     */
    result: string;

    /**
     * The optional type of the evaluate result.
     * This attribute should only be returned by a debug adapter if the client has passed the value true for the 'supportsVariableType' capability of the 'initialize' request.
     */
    type?: string;

    /**
     * Properties of a evaluate result that can be used to determine how to render the result in the UI.
     */
    presentationHint?: VariablePresentationHint;

    /**
     * If variablesReference is > 0, the evaluate result is structured and its children can be retrieved by passing variablesReference to the VariablesRequest.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    variablesReference: integer;

    /**
     * The number of named child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    namedVariables?: integer;

    /**
     * The number of indexed child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    indexedVariables?: integer;

    /**
     * Optional memory reference to a location appropriate for this result.
     * For pointer type eval results, this is generally a reference to the memory address contained in the pointer.
     * This attribute should be returned by a debug adapter if the client has passed the value true for the 'supportsMemoryReferences' capability of the 'initialize' request.
     */
    memoryReference?: string;
  }

  export interface ExceptionInfoParams {
    /**
     * Thread for which exception information should be retrieved.
     */
    threadId: integer;
  }

  export interface ExceptionInfoResult {
    /**
     * ID of the exception that was thrown.
     */
    exceptionId: string;

    /**
     * Descriptive text for the exception provided by the debug adapter.
     */
    description?: string;

    /**
     * Mode that caused the exception notification to be raised.
     */
    breakMode: ExceptionBreakMode;

    /**
     * Detailed information about the exception.
     */
    details?: ExceptionDetails;
  }

  export interface ExitedEventParams {
    /**
     * The exit code returned from the debuggee.
     */
    exitCode: integer;
  }

  export interface GetBreakpointsParams {}

  export interface GetBreakpointsResult {
    breakpoints: Breakpoint[];
  }

  export interface GotoParams {
    /**
     * Set the goto target for this thread.
     */
    threadId: integer;

    /**
     * The location where the debuggee will continue to run.
     */
    targetId: integer;
  }

  export interface GotoResult {}

  export interface GotoTargetsParams {
    /**
     * The source location for which the goto targets are determined.
     */
    source: Source;

    /**
     * The line location for which the goto targets are determined.
     */
    line: integer;

    /**
     * An optional column location for which the goto targets are determined.
     */
    column?: integer;
  }

  export interface GotoTargetsResult {
    /**
     * The possible goto targets of the specified location.
     */
    targets: GotoTarget[];
  }

  export interface InitializeParams {
    /**
     * The ID of the (frontend) client using this adapter.
     */
    clientID?: string;

    /**
     * The human readable name of the (frontend) client using this adapter.
     */
    clientName?: string;

    /**
     * The ID of the debug adapter.
     */
    adapterID: string;

    /**
     * The ISO-639 locale of the (frontend) client using this adapter, e.g. en-US or de-CH.
     */
    locale?: string;

    /**
     * If true all line numbers are 1-based (default).
     */
    linesStartAt1?: boolean;

    /**
     * If true all column numbers are 1-based (default).
     */
    columnsStartAt1?: boolean;

    /**
     * Determines in what format paths are specified. The default is 'path', which is the native format.
     */
    pathFormat?: 'path' | 'uri';

    /**
     * Client supports the optional type attribute for variables.
     */
    supportsVariableType?: boolean;

    /**
     * Client supports the paging of variables.
     */
    supportsVariablePaging?: boolean;

    /**
     * Client supports the runInTerminal request.
     */
    supportsRunInTerminalRequest?: boolean;

    /**
     * Client supports memory references.
     */
    supportsMemoryReferences?: boolean;

    /**
     * Client supports progress reporting.
     */
    supportsProgressReporting?: boolean;
  }

  export interface InitializeResult {
    /**
     * The debug adapter supports the 'configurationDone' request.
     */
    supportsConfigurationDoneRequest?: boolean;

    /**
     * The debug adapter supports function breakpoints.
     */
    supportsFunctionBreakpoints?: boolean;

    /**
     * The debug adapter supports conditional breakpoints.
     */
    supportsConditionalBreakpoints?: boolean;

    /**
     * The debug adapter supports breakpoints that break execution after a specified number of hits.
     */
    supportsHitConditionalBreakpoints?: boolean;

    /**
     * The debug adapter supports a (side effect free) evaluate request for data hovers.
     */
    supportsEvaluateForHovers?: boolean;

    /**
     * Available filters or options for the setExceptionBreakpoints request.
     */
    exceptionBreakpointFilters?: ExceptionBreakpointsFilter[];

    /**
     * The debug adapter supports stepping back via the 'stepBack' and 'reverseContinue' requests.
     */
    supportsStepBack?: boolean;

    /**
     * The debug adapter supports setting a variable to a value.
     */
    supportsSetVariable?: boolean;

    /**
     * The debug adapter supports restarting a frame.
     */
    supportsRestartFrame?: boolean;

    /**
     * The debug adapter supports the 'gotoTargets' request.
     */
    supportsGotoTargetsRequest?: boolean;

    /**
     * The debug adapter supports the 'stepInTargets' request.
     */
    supportsStepInTargetsRequest?: boolean;

    /**
     * The debug adapter supports the 'completions' request.
     */
    supportsCompletionsRequest?: boolean;

    /**
     * The set of characters that should trigger completion in a REPL. If not specified, the UI should assume the '.' character.
     */
    completionTriggerCharacters?: string[];

    /**
     * The debug adapter supports the 'modules' request.
     */
    supportsModulesRequest?: boolean;

    /**
     * The set of additional module information exposed by the debug adapter.
     */
    additionalModuleColumns?: ColumnDescriptor[];

    /**
     * Checksum algorithms supported by the debug adapter.
     */
    supportedChecksumAlgorithms?: ChecksumAlgorithm[];

    /**
     * The debug adapter supports the 'restart' request. In this case a client should not implement 'restart' by terminating and relaunching the adapter but by calling the RestartRequest.
     */
    supportsRestartRequest?: boolean;

    /**
     * The debug adapter supports 'exceptionOptions' on the setExceptionBreakpoints request.
     */
    supportsExceptionOptions?: boolean;

    /**
     * The debug adapter supports a 'format' attribute on the stackTraceRequest, variablesRequest, and evaluateRequest.
     */
    supportsValueFormattingOptions?: boolean;

    /**
     * The debug adapter supports the 'exceptionInfo' request.
     */
    supportsExceptionInfoRequest?: boolean;

    /**
     * The debug adapter supports the 'terminateDebuggee' attribute on the 'disconnect' request.
     */
    supportTerminateDebuggee?: boolean;

    /**
     * The debug adapter supports the delayed loading of parts of the stack, which requires that both the 'startFrame' and 'levels' arguments and the 'totalFrames' result of the 'StackTrace' request are supported.
     */
    supportsDelayedStackTraceLoading?: boolean;

    /**
     * The debug adapter supports the 'loadedSources' request.
     */
    supportsLoadedSourcesRequest?: boolean;

    /**
     * The debug adapter supports logpoints by interpreting the 'logMessage' attribute of the SourceBreakpoint.
     */
    supportsLogPoints?: boolean;

    /**
     * The debug adapter supports the 'terminateThreads' request.
     */
    supportsTerminateThreadsRequest?: boolean;

    /**
     * The debug adapter supports the 'setExpression' request.
     */
    supportsSetExpression?: boolean;

    /**
     * The debug adapter supports the 'terminate' request.
     */
    supportsTerminateRequest?: boolean;

    /**
     * The debug adapter supports data breakpoints.
     */
    supportsDataBreakpoints?: boolean;

    /**
     * The debug adapter supports the 'readMemory' request.
     */
    supportsReadMemoryRequest?: boolean;

    /**
     * The debug adapter supports the 'disassemble' request.
     */
    supportsDisassembleRequest?: boolean;

    /**
     * The debug adapter supports the 'cancel' request.
     */
    supportsCancelRequest?: boolean;

    /**
     * The debug adapter supports the 'breakpointLocations' request.
     */
    supportsBreakpointLocationsRequest?: boolean;

    /**
     * The debug adapter supports the 'clipboard' context value in the 'evaluate' request.
     */
    supportsClipboardContext?: boolean;

    /**
     * The debug adapter supports stepping granularities (argument 'granularity') for the stepping requests.
     */
    supportsSteppingGranularity?: boolean;

    /**
     * The debug adapter supports adding breakpoints based on instruction references.
     */
    supportsInstructionBreakpoints?: boolean;
  }

  export interface InitializedEventParams {}

  export interface KillCompanionBrowserEventParams {
    /**
     * Incrementing ID to refer to this browser launch request
     */
    launchId: number;
  }

  export interface LaunchBrowserInCompanionEventParams {
    /**
     * Type of browser to launch
     */
    type: string;

    /**
     * Incrementing ID to refer to this browser launch request
     */
    launchId: number;

    /**
     * Local port the debug server is listening on
     */
    serverPort: number;

    browserArgs?: string[];

    attach?: object;

    /**
     * Original launch parameters for the debug session
     */
    params: object;
  }

  export interface LaunchParams {
    /**
     * If noDebug is true the launch request should launch the program without enabling debugging.
     */
    noDebug?: boolean;

    /**
     * Optional data from the previous, restarted session.
     * The data is sent as the 'restart' attribute of the 'terminated' event.
     * The client should leave the data intact.
     */
    __restart?: any[] | boolean | integer | null | number | object | string;
  }

  export interface LaunchResult {}

  export interface LaunchUnelevatedParams {
    process?: string;

    args?: string[];
  }

  export interface LaunchUnelevatedResult {}

  export interface LaunchVSCodeParams {
    args: LaunchVSCodeArgument[];

    env: object;

    debugRenderer?: boolean;
  }

  export interface LaunchVSCodeResult {
    rendererDebugPort?: number;
  }

  export interface LoadedSourceEventParams {
    /**
     * The reason for the event.
     */
    reason: string;

    /**
     * The new, changed, or removed source.
     */
    source: Source;
  }

  export interface LoadedSourcesParams {}

  export interface LoadedSourcesResult {
    /**
     * Set of loaded sources.
     */
    sources: Source[];
  }

  export interface LongPredictionEventParams {}

  export interface ModuleEventParams {
    /**
     * The reason for the event.
     */
    reason: string;

    /**
     * The new, changed, or removed module. In case of 'removed' only the module id is used.
     */
    module: Module;
  }

  export interface ModulesParams {
    /**
     * The index of the first module to return; if omitted modules start at 0.
     */
    startModule?: integer;

    /**
     * The number of modules to return. If moduleCount is not specified or 0, all modules are returned.
     */
    moduleCount?: integer;
  }

  export interface ModulesResult {
    /**
     * All modules or range of modules.
     */
    modules: Module[];

    /**
     * The total number of modules available.
     */
    totalModules?: integer;
  }

  export interface NextParams {
    /**
     * Execute 'next' for this thread.
     */
    threadId: integer;

    /**
     * Optional granularity to step. If no granularity is specified, a granularity of 'statement' is assumed.
     */
    granularity?: SteppingGranularity;
  }

  export interface NextResult {}

  export interface OutputEventParams {
    /**
     * The output category. If not specified, 'console' is assumed.
     */
    category?: 'console' | 'stdout' | 'stderr' | 'telemetry';

    /**
     * The output to report.
     */
    output: string;

    /**
     * Support for keeping an output log organized by grouping related messages.
     */
    group?: string;

    /**
     * If an attribute 'variablesReference' exists and its value is > 0, the output contains objects which can be retrieved by passing 'variablesReference' to the 'variables' request. The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    variablesReference?: integer;

    /**
     * An optional source location where the output was produced.
     */
    source?: Source;

    /**
     * An optional source location line where the output was produced.
     */
    line?: integer;

    /**
     * An optional source location column where the output was produced.
     */
    column?: integer;

    /**
     * Optional data to report. For the 'telemetry' category the data will be sent to telemetry, for the other categories the data is shown in JSON format.
     */
    data?: any[] | boolean | integer | null | number | object | string;
  }

  export interface PauseParams {
    /**
     * Pause execution for this thread.
     */
    threadId: integer;
  }

  export interface PauseResult {}

  export interface PrettyPrintSourceParams {
    /**
     * Source to be pretty printed.
     */
    source: Source;

    /**
     * Line number of currently selected location to reveal after pretty printing. If not present, nothing is revealed.
     */
    line?: integer;

    /**
     * Column number of currently selected location to reveal after pretty printing.
     */
    column?: integer;
  }

  export interface PrettyPrintSourceResult {}

  export interface ProcessEventParams {
    /**
     * The logical name of the process. This is usually the full path to process's executable file. Example: /home/example/myproj/program.js.
     */
    name: string;

    /**
     * The system process id of the debugged process. This property will be missing for non-system processes.
     */
    systemProcessId?: integer;

    /**
     * If true, the process is running on the same computer as the debug adapter.
     */
    isLocalProcess?: boolean;

    /**
     * Describes how the debug engine started debugging this process.
     */
    startMethod?: string;

    /**
     * The size of a pointer or address for this process, in bits. This value may be used by clients when formatting addresses for display.
     */
    pointerSize?: integer;
  }

  export interface ProfileStartedEventParams {
    /**
     * Type of running profile
     */
    type: string;

    /**
     * Location where the profile is saved.
     */
    file: string;
  }

  export interface ProfilerStateUpdateEventParams {
    /**
     * Description of the current state
     */
    label: string;

    /**
     * Set to false if the profile has now ended
     */
    running: boolean;
  }

  export interface ProgressEndEventParams {
    /**
     * The ID that was introduced in the initial 'ProgressStartEvent'.
     */
    progressId: string;

    /**
     * Optional, more detailed progress message. If omitted, the previous message (if any) is used.
     */
    message?: string;
  }

  export interface ProgressStartEventParams {
    /**
     * An ID that must be used in subsequent 'progressUpdate' and 'progressEnd' events to make them refer to the same progress reporting.
     * IDs must be unique within a debug session.
     */
    progressId: string;

    /**
     * Mandatory (short) title of the progress reporting. Shown in the UI to describe the long running operation.
     */
    title: string;

    /**
     * The request ID that this progress report is related to. If specified a debug adapter is expected to emit
     * progress events for the long running request until the request has been either completed or cancelled.
     * If the request ID is omitted, the progress report is assumed to be related to some general activity of the debug adapter.
     */
    requestId?: number;

    /**
     * If true, the request that reports progress may be canceled with a 'cancel' request.
     * So this property basically controls whether the client should use UX that supports cancellation.
     * Clients that don't support cancellation are allowed to ignore the setting.
     */
    cancellable?: boolean;

    /**
     * Optional, more detailed progress message.
     */
    message?: string;

    /**
     * Optional progress percentage to display (value range: 0 to 100). If omitted no percentage will be shown.
     */
    percentage?: number;
  }

  export interface ProgressUpdateEventParams {
    /**
     * The ID that was introduced in the initial 'progressStart' event.
     */
    progressId: string;

    /**
     * Optional, more detailed progress message. If omitted, the previous message (if any) is used.
     */
    message?: string;

    /**
     * Optional progress percentage to display (value range: 0 to 100). If omitted no percentage will be shown.
     */
    percentage?: number;
  }

  export interface ReadMemoryParams {
    /**
     * Memory reference to the base location from which data should be read.
     */
    memoryReference: string;

    /**
     * Optional offset (in bytes) to be applied to the reference location before reading data. Can be negative.
     */
    offset?: integer;

    /**
     * Number of bytes to read at the specified location and offset.
     */
    count: integer;
  }

  export interface ReadMemoryResult {
    /**
     * The address of the first byte of data returned.
     * Treated as a hex value if prefixed with '0x', or as a decimal value otherwise.
     */
    address: string;

    /**
     * The number of unreadable bytes encountered after the last successfully read byte.
     * This can be used to determine the number of bytes that must be skipped before a subsequent 'readMemory' request will succeed.
     */
    unreadableBytes?: integer;

    /**
     * The bytes read from memory, encoded using base64.
     */
    data?: string;
  }

  export interface RestartFrameParams {
    /**
     * Restart this stackframe.
     */
    frameId: integer;
  }

  export interface RestartFrameResult {}

  export interface RestartParams {}

  export interface RestartResult {}

  export interface RevealLocationRequestedEventParams {
    /**
     * The source to reveal.
     */
    source: Source;

    /**
     * The line number to reveal.
     */
    line?: integer;

    /**
     * The column number to reveal.
     */
    column?: integer;
  }

  export interface RevealPageParams {}

  export interface RevealPageResult {}

  export interface ReverseContinueParams {
    /**
     * Execute 'reverseContinue' for this thread.
     */
    threadId: integer;
  }

  export interface ReverseContinueResult {}

  export interface RunInTerminalParams {
    /**
     * What kind of terminal to launch.
     */
    kind?: string;

    /**
     * Optional title of the terminal.
     */
    title?: string;

    /**
     * Working directory of the command.
     */
    cwd: string;

    /**
     * List of arguments. The first argument is the command to run.
     */
    args: string[];

    /**
     * Environment key-value pairs that are added to or removed from the default environment.
     */
    env?: object;
  }

  export interface RunInTerminalResult {
    /**
     * The process ID. The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    processId?: integer;

    /**
     * The process ID of the terminal shell. The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    shellProcessId?: integer;
  }

  export interface ScopesParams {
    /**
     * Retrieve the scopes for this stackframe.
     */
    frameId: integer;
  }

  export interface ScopesResult {
    /**
     * The scopes of the stackframe. If the array has length zero, there are no scopes available.
     */
    scopes: Scope[];
  }

  export interface SetBreakpointsParams {
    /**
     * The source location of the breakpoints; either 'source.path' or 'source.reference' must be specified.
     */
    source: Source;

    /**
     * The code locations of the breakpoints.
     */
    breakpoints?: SourceBreakpoint[];

    /**
     * Deprecated: The code locations of the breakpoints.
     */
    lines?: integer[];

    /**
     * A value of true indicates that the underlying source has been modified which results in new breakpoint locations.
     */
    sourceModified?: boolean;
  }

  export interface SetBreakpointsResult {
    /**
     * Information about the breakpoints.
     * The array elements are in the same order as the elements of the 'breakpoints' (or the deprecated 'lines') array in the arguments.
     */
    breakpoints: Breakpoint[];
  }

  export interface SetDataBreakpointsParams {
    /**
     * The contents of this array replaces all existing data breakpoints. An empty array clears all data breakpoints.
     */
    breakpoints: DataBreakpoint[];
  }

  export interface SetDataBreakpointsResult {
    /**
     * Information about the data breakpoints. The array elements correspond to the elements of the input argument 'breakpoints' array.
     */
    breakpoints: Breakpoint[];
  }

  export interface SetExceptionBreakpointsParams {
    /**
     * IDs of checked exception options. The set of IDs is returned via the 'exceptionBreakpointFilters' capability.
     */
    filters: string[];

    /**
     * Configuration options for selected exceptions.
     * The attribute is only honored by a debug adapter if the capability 'supportsExceptionOptions' is true.
     */
    exceptionOptions?: ExceptionOptions[];
  }

  export interface SetExceptionBreakpointsResult {}

  export interface SetExpressionParams {
    /**
     * The l-value expression to assign to.
     */
    expression: string;

    /**
     * The value expression to assign to the l-value expression.
     */
    value: string;

    /**
     * Evaluate the expressions in the scope of this stack frame. If not specified, the expressions are evaluated in the global scope.
     */
    frameId?: integer;

    /**
     * Specifies how the resulting value should be formatted.
     */
    format?: ValueFormat;
  }

  export interface SetExpressionResult {
    /**
     * The new value of the expression.
     */
    value: string;

    /**
     * The optional type of the value.
     * This attribute should only be returned by a debug adapter if the client has passed the value true for the 'supportsVariableType' capability of the 'initialize' request.
     */
    type?: string;

    /**
     * Properties of a value that can be used to determine how to render the result in the UI.
     */
    presentationHint?: VariablePresentationHint;

    /**
     * If variablesReference is > 0, the value is structured and its children can be retrieved by passing variablesReference to the VariablesRequest.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    variablesReference?: integer;

    /**
     * The number of named child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    namedVariables?: integer;

    /**
     * The number of indexed child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    indexedVariables?: integer;
  }

  export interface SetFunctionBreakpointsParams {
    /**
     * The function names of the breakpoints.
     */
    breakpoints: FunctionBreakpoint[];
  }

  export interface SetFunctionBreakpointsResult {
    /**
     * Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array.
     */
    breakpoints: Breakpoint[];
  }

  export interface SetInstructionBreakpointsParams {
    /**
     * The instruction references of the breakpoints
     */
    breakpoints: InstructionBreakpoint[];
  }

  export interface SetInstructionBreakpointsResult {
    /**
     * Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array.
     */
    breakpoints: Breakpoint[];
  }

  export interface SetVariableParams {
    /**
     * The reference of the variable container.
     */
    variablesReference: integer;

    /**
     * The name of the variable in the container.
     */
    name: string;

    /**
     * The value of the variable.
     */
    value: string;

    /**
     * Specifies details on how to format the response value.
     */
    format?: ValueFormat;
  }

  export interface SetVariableResult {
    /**
     * The new value of the variable.
     */
    value: string;

    /**
     * The type of the new value. Typically shown in the UI when hovering over the value.
     */
    type?: string;

    /**
     * If variablesReference is > 0, the new value is structured and its children can be retrieved by passing variablesReference to the VariablesRequest.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    variablesReference?: integer;

    /**
     * The number of named child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    namedVariables?: integer;

    /**
     * The number of indexed child variables.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    indexedVariables?: integer;
  }

  export interface SourceParams {
    /**
     * Specifies the source content to load. Either source.path or source.sourceReference must be specified.
     */
    source?: Source;

    /**
     * The reference to the source. This is the same as source.sourceReference.
     * This is provided for backward compatibility since old backends do not understand the 'source' attribute.
     */
    sourceReference: integer;
  }

  export interface SourceResult {
    /**
     * Content of the source reference.
     */
    content: string;

    /**
     * Optional content type (mime type) of the source.
     */
    mimeType?: string;
  }

  export interface StackTraceParams {
    /**
     * Retrieve the stacktrace for this thread.
     */
    threadId: integer;

    /**
     * The index of the first frame to return; if omitted frames start at 0.
     */
    startFrame?: integer;

    /**
     * The maximum number of frames to return. If levels is not specified or 0, all frames are returned.
     */
    levels?: integer;

    /**
     * Specifies details on how to format the stack frames.
     * The attribute is only honored by a debug adapter if the capability 'supportsValueFormattingOptions' is true.
     */
    format?: StackFrameFormat;
  }

  export interface StackTraceResult {
    /**
     * The frames of the stackframe. If the array has length zero, there are no stackframes available.
     * This means that there is no location information available.
     */
    stackFrames: StackFrame[];

    /**
     * The total number of frames available.
     */
    totalFrames?: integer;
  }

  export interface StartProfileParams {
    /**
     * Breakpoints where we should stop once hit.
     */
    stopAtBreakpoint?: number[];

    /**
     * Type of profile that should be taken
     */
    type: string;

    /**
     * Additional arguments for the type of profiler
     */
    params?: object;
  }

  export interface StartProfileResult {}

  export interface StartSelfProfileParams {
    /**
     * File where the profile should be saved
     */
    file: string;
  }

  export interface StartSelfProfileResult {}

  export interface StepBackParams {
    /**
     * Execute 'stepBack' for this thread.
     */
    threadId: integer;

    /**
     * Optional granularity to step. If no granularity is specified, a granularity of 'statement' is assumed.
     */
    granularity?: SteppingGranularity;
  }

  export interface StepBackResult {}

  export interface StepInParams {
    /**
     * Execute 'stepIn' for this thread.
     */
    threadId: integer;

    /**
     * Optional id of the target to step into.
     */
    targetId?: integer;

    /**
     * Optional granularity to step. If no granularity is specified, a granularity of 'statement' is assumed.
     */
    granularity?: SteppingGranularity;
  }

  export interface StepInResult {}

  export interface StepInTargetsParams {
    /**
     * The stack frame for which to retrieve the possible stepIn targets.
     */
    frameId: integer;
  }

  export interface StepInTargetsResult {
    /**
     * The possible stepIn targets of the specified source location.
     */
    targets: StepInTarget[];
  }

  export interface StepOutParams {
    /**
     * Execute 'stepOut' for this thread.
     */
    threadId: integer;

    /**
     * Optional granularity to step. If no granularity is specified, a granularity of 'statement' is assumed.
     */
    granularity?: SteppingGranularity;
  }

  export interface StepOutResult {}

  export interface StopProfileParams {}

  export interface StopProfileResult {}

  export interface StopSelfProfileParams {}

  export interface StopSelfProfileResult {}

  export interface StoppedEventParams {
    /**
     * The reason for the event.
     * For backward compatibility this string is shown in the UI if the 'description' attribute is missing (but it must not be translated).
     */
    reason:
      | 'step'
      | 'breakpoint'
      | 'exception'
      | 'pause'
      | 'entry'
      | 'goto'
      | 'function breakpoint'
      | 'data breakpoint'
      | 'instruction breakpoint';

    /**
     * The full reason for the event, e.g. 'Paused on exception'. This string is shown in the UI as is and must be translated.
     */
    description?: string;

    /**
     * The thread which was stopped.
     */
    threadId?: integer;

    /**
     * A value of true hints to the frontend that this event should not change the focus.
     */
    preserveFocusHint?: boolean;

    /**
     * Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI.
     */
    text?: string;

    /**
     * If 'allThreadsStopped' is true, a debug adapter can announce that all threads have stopped.
     * - The client should use this information to enable that all threads can be expanded to access their stacktraces.
     * - If the attribute is missing or false, only the thread with the given threadId can be expanded.
     */
    allThreadsStopped?: boolean;
  }

  export interface TerminateParams {
    /**
     * A value of true indicates that this 'terminate' request is part of a restart sequence.
     */
    restart?: boolean;
  }

  export interface TerminateResult {}

  export interface TerminateThreadsParams {
    /**
     * Ids of threads to be terminated.
     */
    threadIds?: integer[];
  }

  export interface TerminateThreadsResult {}

  export interface TerminatedEventParams {
    /**
     * A debug adapter may set 'restart' to true (or to an arbitrary object) to request that the front end restarts the session.
     * The value is not interpreted by the client and passed unmodified as an attribute '__restart' to the 'launch' and 'attach' requests.
     */
    restart?: any[] | boolean | integer | null | number | object | string;
  }

  export interface ThreadEventParams {
    /**
     * The reason for the event.
     */
    reason: 'started' | 'exited';

    /**
     * The identifier of the thread.
     */
    threadId: integer;
  }

  export interface ThreadsParams {}

  export interface ThreadsResult {
    /**
     * All threads.
     */
    threads: Thread[];
  }

  export interface ToggleSkipFileStatusParams {
    /**
     * Url of file to be skipped.
     */
    resource?: string;

    /**
     * Source reference number of file.
     */
    sourceReference?: number;
  }

  export interface ToggleSkipFileStatusResult {}

  export interface VariablesParams {
    /**
     * The Variable reference.
     */
    variablesReference: integer;

    /**
     * Optional filter to limit the child variables to either named or indexed. If omitted, both types are fetched.
     */
    filter?: string;

    /**
     * The index of the first variable to return; if omitted children start at 0.
     */
    start?: integer;

    /**
     * The number of variables to return. If count is missing or 0, all variables are returned.
     */
    count?: integer;

    /**
     * Specifies details on how to format the Variable values.
     * The attribute is only honored by a debug adapter if the capability 'supportsValueFormattingOptions' is true.
     */
    format?: ValueFormat;
  }

  export interface VariablesResult {
    /**
     * All (or a range) of variables for the given variable reference.
     */
    variables: Variable[];
  }

  /**
   * A Variable is a name/value pair.
   * Optionally a variable can have a 'type' that is shown if space permits or when hovering over the variable's name.
   * An optional 'kind' is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.
   * If the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.
   * If the number of named or indexed children is large, the numbers should be returned via the optional 'namedVariables' and 'indexedVariables' attributes.
   * The client can use this optional information to present the children in a paged UI and fetch them in chunks.
   */
  export interface Variable {
    /**
     * The variable's name.
     */
    name: string;

    /**
     * The variable's value. This can be a multi-line text, e.g. for a function the body of a function.
     */
    value: string;

    /**
     * The type of the variable's value. Typically shown in the UI when hovering over the value.
     * This attribute should only be returned by a debug adapter if the client has passed the value true for the 'supportsVariableType' capability of the 'initialize' request.
     */
    type?: string;

    /**
     * Properties of a variable that can be used to determine how to render the variable in the UI.
     */
    presentationHint?: VariablePresentationHint;

    /**
     * Optional evaluatable name of this variable which can be passed to the 'EvaluateRequest' to fetch the variable's value.
     */
    evaluateName?: string;

    /**
     * If variablesReference is > 0, the variable is structured and its children can be retrieved by passing variablesReference to the VariablesRequest.
     */
    variablesReference: integer;

    /**
     * The number of named child variables.
     * The client can use this optional information to present the children in a paged UI and fetch them in chunks.
     */
    namedVariables?: integer;

    /**
     * The number of indexed child variables.
     * The client can use this optional information to present the children in a paged UI and fetch them in chunks.
     */
    indexedVariables?: integer;

    /**
     * Optional memory reference for the variable if the variable represents executable code, such as a function pointer.
     * This attribute is only required if the client has passed the value true for the 'supportsMemoryReferences' capability of the 'initialize' request.
     */
    memoryReference?: string;
  }

  /**
   * A Thread
   */
  export interface Thread {
    /**
     * Unique identifier for the thread.
     */
    id: integer;

    /**
     * A name of the thread.
     */
    name: string;
  }

  /**
   * A StepInTarget can be used in the 'stepIn' request and determines into which single target the stepIn request should step.
   */
  export interface StepInTarget {
    /**
     * Unique identifier for a stepIn target.
     */
    id: integer;

    /**
     * The name of the stepIn target (shown in the UI).
     */
    label: string;
  }

  /**
   * A Stackframe contains the source location.
   */
  export interface StackFrame {
    /**
     * An identifier for the stack frame. It must be unique across all threads.
     * This id can be used to retrieve the scopes of the frame with the 'scopesRequest' or to restart the execution of a stackframe.
     */
    id: integer;

    /**
     * The name of the stack frame, typically a method name.
     */
    name: string;

    /**
     * The optional source of the frame.
     */
    source?: Source;

    /**
     * The line within the file of the frame. If source is null or doesn't exist, line is 0 and must be ignored.
     */
    line: integer;

    /**
     * The column within the line. If source is null or doesn't exist, column is 0 and must be ignored.
     */
    column: integer;

    /**
     * An optional end line of the range covered by the stack frame.
     */
    endLine?: integer;

    /**
     * An optional end column of the range covered by the stack frame.
     */
    endColumn?: integer;

    /**
     * Optional memory reference for the current instruction pointer in this frame.
     */
    instructionPointerReference?: string;

    /**
     * The module associated with this frame, if any.
     */
    moduleId?: integer | string;

    /**
     * An optional hint for how to present this frame in the UI.
     * A value of 'label' can be used to indicate that the frame is an artificial frame that is used as a visual label or separator. A value of 'subtle' can be used to change the appearance of a frame in a 'subtle' way.
     */
    presentationHint?: string;
  }

  export interface StackFrameFormat extends ValueFormat {
    /**
     * Displays parameters for the stack frame.
     */
    parameters?: boolean;

    /**
     * Displays the types of parameters for the stack frame.
     */
    parameterTypes?: boolean;

    /**
     * Displays the names of parameters for the stack frame.
     */
    parameterNames?: boolean;

    /**
     * Displays the values of parameters for the stack frame.
     */
    parameterValues?: boolean;

    /**
     * Displays the line number of the stack frame.
     */
    line?: boolean;

    /**
     * Displays the module of the stack frame.
     */
    module?: boolean;

    /**
     * Includes all stack frames, including those the debug adapter might otherwise hide.
     */
    includeAll?: boolean;
  }

  /**
   * Properties of a breakpoint passed to the setInstructionBreakpoints request
   */
  export interface InstructionBreakpoint {
    /**
     * The instruction reference of the breakpoint.
     * This should be a memory or instruction pointer reference from an EvaluateResponse, Variable, StackFrame, GotoTarget, or Breakpoint.
     */
    instructionReference: string;

    /**
     * An optional offset from the instruction reference.
     * This can be negative.
     */
    offset?: integer;

    /**
     * An optional expression for conditional breakpoints.
     * It is only honored by a debug adapter if the capability 'supportsConditionalBreakpoints' is true.
     */
    condition?: string;

    /**
     * An optional expression that controls how many hits of the breakpoint are ignored.
     * The backend is expected to interpret the expression as needed.
     * The attribute is only honored by a debug adapter if the capability 'supportsHitConditionalBreakpoints' is true.
     */
    hitCondition?: string;
  }

  /**
   * Properties of a breakpoint passed to the setFunctionBreakpoints request.
   */
  export interface FunctionBreakpoint {
    /**
     * The name of the function.
     */
    name: string;

    /**
     * An optional expression for conditional breakpoints.
     * It is only honored by a debug adapter if the capability 'supportsConditionalBreakpoints' is true.
     */
    condition?: string;

    /**
     * An optional expression that controls how many hits of the breakpoint are ignored.
     * The backend is expected to interpret the expression as needed.
     * The attribute is only honored by a debug adapter if the capability 'supportsHitConditionalBreakpoints' is true.
     */
    hitCondition?: string;
  }

  /**
   * An ExceptionOptions assigns configuration options to a set of exceptions.
   */
  export interface ExceptionOptions {
    /**
     * A path that selects a single or multiple exceptions in a tree. If 'path' is missing, the whole tree is selected.
     * By convention the first segment of the path is a category that is used to group exceptions in the UI.
     */
    path?: ExceptionPathSegment[];

    /**
     * Condition when a thrown exception should result in a break.
     */
    breakMode: ExceptionBreakMode;
  }

  /**
   * An ExceptionPathSegment represents a segment in a path that is used to match leafs or nodes in a tree of exceptions.
   * If a segment consists of more than one name, it matches the names provided if 'negate' is false or missing or
   * it matches anything except the names provided if 'negate' is true.
   */
  export interface ExceptionPathSegment {
    /**
     * If false or missing this segment matches the names provided, otherwise it matches anything except the names provided.
     */
    negate?: boolean;

    /**
     * Depending on the value of 'negate' the names that should match or not match.
     */
    names: string[];
  }

  /**
   * Properties of a data breakpoint passed to the setDataBreakpoints request.
   */
  export interface DataBreakpoint {
    /**
     * An id representing the data. This id is returned from the dataBreakpointInfo request.
     */
    dataId: string;

    /**
     * The access type of the data.
     */
    accessType?: DataBreakpointAccessType;

    /**
     * An optional expression for conditional breakpoints.
     */
    condition?: string;

    /**
     * An optional expression that controls how many hits of the breakpoint are ignored.
     * The backend is expected to interpret the expression as needed.
     */
    hitCondition?: string;
  }

  /**
   * Properties of a breakpoint or logpoint passed to the setBreakpoints request.
   */
  export interface SourceBreakpoint {
    /**
     * The source line of the breakpoint or logpoint.
     */
    line: integer;

    /**
     * An optional source column of the breakpoint.
     */
    column?: integer;

    /**
     * An optional expression for conditional breakpoints.
     * It is only honored by a debug adapter if the capability 'supportsConditionalBreakpoints' is true.
     */
    condition?: string;

    /**
     * An optional expression that controls how many hits of the breakpoint are ignored.
     * The backend is expected to interpret the expression as needed.
     * The attribute is only honored by a debug adapter if the capability 'supportsHitConditionalBreakpoints' is true.
     */
    hitCondition?: string;

    /**
     * If this attribute exists and is non-empty, the backend must not 'break' (stop)
     * but log the message instead. Expressions within {} are interpolated.
     * The attribute is only honored by a debug adapter if the capability 'supportsLogPoints' is true.
     */
    logMessage?: string;
  }

  /**
   * A Scope is a named container for variables. Optionally a scope can map to a source or a range within a source.
   */
  export interface Scope {
    /**
     * Name of the scope such as 'Arguments', 'Locals', or 'Registers'. This string is shown in the UI as is and can be translated.
     */
    name: string;

    /**
     * An optional hint for how to present this scope in the UI. If this attribute is missing, the scope is shown with a generic UI.
     */
    presentationHint?: 'arguments' | 'locals' | 'registers';

    /**
     * The variables of this scope can be retrieved by passing the value of variablesReference to the VariablesRequest.
     */
    variablesReference: integer;

    /**
     * The number of named variables in this scope.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     */
    namedVariables?: integer;

    /**
     * The number of indexed variables in this scope.
     * The client can use this optional information to present the variables in a paged UI and fetch them in chunks.
     */
    indexedVariables?: integer;

    /**
     * If true, the number of variables in this scope is large or expensive to retrieve.
     */
    expensive: boolean;

    /**
     * Optional source for this scope.
     */
    source?: Source;

    /**
     * Optional start line of the range covered by this scope.
     */
    line?: integer;

    /**
     * Optional start column of the range covered by this scope.
     */
    column?: integer;

    /**
     * Optional end line of the range covered by this scope.
     */
    endLine?: integer;

    /**
     * Optional end column of the range covered by this scope.
     */
    endColumn?: integer;
  }

  /**
   * The granularity of one 'step' in the stepping requests 'next', 'stepIn', 'stepOut', and 'stepBack'.
   */
  export type SteppingGranularity = string;

  /**
   * A Module object represents a row in the modules view.
   * Two attributes are mandatory: an id identifies a module in the modules view and is used in a ModuleEvent for identifying a module for adding, updating or deleting.
   * The name is used to minimally render the module in the UI.
   *
   * Additional attributes can be added to the module. They will show up in the module View if they have a corresponding ColumnDescriptor.
   *
   * To avoid an unnecessary proliferation of additional attributes with similar semantics but different names
   * we recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found.
   */
  export interface Module {
    /**
     * Unique identifier for the module.
     */
    id: integer | string;

    /**
     * A name of the module.
     */
    name: string;

    /**
     * optional but recommended attributes.
     * always try to use these first before introducing additional attributes.
     *
     * Logical full path to the module. The exact definition is implementation defined, but usually this would be a full path to the on-disk file for the module.
     */
    path?: string;

    /**
     * True if the module is optimized.
     */
    isOptimized?: boolean;

    /**
     * True if the module is considered 'user code' by a debugger that supports 'Just My Code'.
     */
    isUserCode?: boolean;

    /**
     * Version of Module.
     */
    version?: string;

    /**
     * User understandable description of if symbols were found for the module (ex: 'Symbols Loaded', 'Symbols not found', etc.
     */
    symbolStatus?: string;

    /**
     * Logical full path to the symbol file. The exact definition is implementation defined.
     */
    symbolFilePath?: string;

    /**
     * Module created or modified.
     */
    dateTimeStamp?: string;

    /**
     * Address range covered by this module.
     */
    addressRange?: string;
  }

  /**
   * This interface represents a single command line argument split into a "prefix" and a "path" half. The optional "prefix" contains arbitrary text and the optional "path" contains a file system path. Concatenating both results in the original command line argument.
   */
  export interface LaunchVSCodeArgument {
    path?: string;

    prefix?: string;
  }

  /**
   * Names of checksum algorithms that may be supported by a debug adapter.
   */
  export type ChecksumAlgorithm = string;

  /**
   * A ColumnDescriptor specifies what module attribute to show in a column of the ModulesView, how to format it,
   * and what the column's label should be.
   * It is only used if the underlying UI actually supports this level of customization.
   */
  export interface ColumnDescriptor {
    /**
     * Name of the attribute rendered in this column.
     */
    attributeName: string;

    /**
     * Header UI label of column.
     */
    label: string;

    /**
     * Format to use for the rendered values in this column. TBD how the format strings looks like.
     */
    format?: string;

    /**
     * Datatype of values in this column.  Defaults to 'string' if not specified.
     */
    type?: string;

    /**
     * Width of this column in characters (hint only).
     */
    width?: integer;
  }

  /**
   * An ExceptionBreakpointsFilter is shown in the UI as an option for configuring how exceptions are dealt with.
   */
  export interface ExceptionBreakpointsFilter {
    /**
     * The internal ID of the filter. This value is passed to the setExceptionBreakpoints request.
     */
    filter: string;

    /**
     * The name of the filter. This will be shown in the UI.
     */
    label: string;

    /**
     * Initial value of the filter. If not specified a value 'false' is assumed.
     */
    default?: boolean;
  }

  /**
   * A GotoTarget describes a code location that can be used as a target in the 'goto' request.
   * The possible goto targets can be determined via the 'gotoTargets' request.
   */
  export interface GotoTarget {
    /**
     * Unique identifier for a goto target. This is used in the goto request.
     */
    id: integer;

    /**
     * The name of the goto target (shown in the UI).
     */
    label: string;

    /**
     * The line of the goto target.
     */
    line: integer;

    /**
     * An optional column of the goto target.
     */
    column?: integer;

    /**
     * An optional end line of the range covered by the goto target.
     */
    endLine?: integer;

    /**
     * An optional end column of the range covered by the goto target.
     */
    endColumn?: integer;

    /**
     * Optional memory reference for the instruction pointer value represented by this target.
     */
    instructionPointerReference?: string;
  }

  /**
   * Detailed information about an exception that has occurred.
   */
  export interface ExceptionDetails {
    /**
     * Message contained in the exception.
     */
    message?: string;

    /**
     * Short type name of the exception object.
     */
    typeName?: string;

    /**
     * Fully-qualified type name of the exception object.
     */
    fullTypeName?: string;

    /**
     * Optional expression that can be evaluated in the current scope to obtain the exception object.
     */
    evaluateName?: string;

    /**
     * Stack trace at the time the exception was thrown.
     */
    stackTrace?: string;

    /**
     * Details of the exception contained by this exception, if any.
     */
    innerException?: ExceptionDetails[];
  }

  /**
   * This enumeration defines all possible conditions when a thrown exception should result in a break.
   * never: never breaks,
   * always: always breaks,
   * unhandled: breaks when exception unhandled,
   * userUnhandled: breaks if the exception is not handled by user code.
   */
  export type ExceptionBreakMode = string;

  /**
   * Optional properties of a variable that can be used to determine how to render the variable in the UI.
   */
  export interface VariablePresentationHint {
    /**
     * The kind of variable. Before introducing additional values, try to use the listed values.
     */
    kind?:
      | 'property'
      | 'method'
      | 'class'
      | 'data'
      | 'event'
      | 'baseClass'
      | 'innerClass'
      | 'interface'
      | 'mostDerivedClass'
      | 'virtual'
      | 'dataBreakpoint';

    /**
     * Set of attributes represented as an array of strings. Before introducing additional values, try to use the listed values.
     */
    attributes?:
      | 'static'
      | 'constant'
      | 'readOnly'
      | 'rawString'
      | 'hasObjectId'
      | 'canHaveObjectId'
      | 'hasSideEffects'[];

    /**
     * Visibility of variable. Before introducing additional values, try to use the listed values.
     */
    visibility?: 'public' | 'private' | 'protected' | 'internal' | 'final';
  }

  /**
   * Provides formatting information for a value.
   */
  export interface ValueFormat {
    /**
     * Display the value in hex.
     */
    hex?: boolean;
  }

  /**
   * Represents a single disassembled instruction.
   */
  export interface DisassembledInstruction {
    /**
     * The address of the instruction. Treated as a hex value if prefixed with '0x', or as a decimal value otherwise.
     */
    address: string;

    /**
     * Optional raw bytes representing the instruction and its operands, in an implementation-defined format.
     */
    instructionBytes?: string;

    /**
     * Text representing the instruction and its operands, in an implementation-defined format.
     */
    instruction: string;

    /**
     * Name of the symbol that corresponds with the location of this instruction, if any.
     */
    symbol?: string;

    /**
     * Source location that corresponds to this instruction, if any.
     * Should always be set (if available) on the first instruction returned,
     * but can be omitted afterwards if this instruction maps to the same source file as the previous instruction.
     */
    location?: Source;

    /**
     * The line within the source location that corresponds to this instruction, if any.
     */
    line?: integer;

    /**
     * The column within the line that corresponds to this instruction, if any.
     */
    column?: integer;

    /**
     * The end line of the range that corresponds to this instruction, if any.
     */
    endLine?: integer;

    /**
     * The end column of the range that corresponds to this instruction, if any.
     */
    endColumn?: integer;
  }

  /**
   * This enumeration defines all possible access types for data breakpoints.
   */
  export type DataBreakpointAccessType = string;

  /**
   * CompletionItems are the suggestions returned from the CompletionsRequest.
   */
  export interface CompletionItem {
    /**
     * The label of this completion item. By default this is also the text that is inserted when selecting this completion.
     */
    label: string;

    /**
     * If text is not falsy then it is inserted instead of the label.
     */
    text?: string;

    /**
     * A string that should be used when comparing this item with other items. When `falsy` the label is used.
     */
    sortText?: string;

    /**
     * The item's type. Typically the client uses this information to render the item in the UI with an icon.
     */
    type?: CompletionItemType;

    /**
     * This value determines the location (in the CompletionsRequest's 'text' attribute) where the completion text is added.
     * If missing the text is added at the location specified by the CompletionsRequest's 'column' attribute.
     */
    start?: integer;

    /**
     * This value determines how many characters are overwritten by the completion text.
     * If missing the value 0 is assumed which results in the completion text being inserted.
     */
    length?: integer;

    /**
     * Determines the start of the new selection after the text has been inserted (or replaced).
     * The start position must in the range 0 and length of the completion text.
     * If omitted the selection starts at the end of the completion text.
     */
    selectionStart?: integer;

    /**
     * Determines the length of the new selection after the text has been inserted (or replaced).
     * The selection can not extend beyond the bounds of the completion text.
     * If omitted the length is assumed to be 0.
     */
    selectionLength?: integer;
  }

  /**
   * Some predefined types for the CompletionItem. Please note that not all clients have specific icons for all of them.
   */
  export type CompletionItemType = string;

  /**
   * Information about the capabilities of a debug adapter.
   */
  export interface Capabilities {
    /**
     * The debug adapter supports the 'configurationDone' request.
     */
    supportsConfigurationDoneRequest?: boolean;

    /**
     * The debug adapter supports function breakpoints.
     */
    supportsFunctionBreakpoints?: boolean;

    /**
     * The debug adapter supports conditional breakpoints.
     */
    supportsConditionalBreakpoints?: boolean;

    /**
     * The debug adapter supports breakpoints that break execution after a specified number of hits.
     */
    supportsHitConditionalBreakpoints?: boolean;

    /**
     * The debug adapter supports a (side effect free) evaluate request for data hovers.
     */
    supportsEvaluateForHovers?: boolean;

    /**
     * Available filters or options for the setExceptionBreakpoints request.
     */
    exceptionBreakpointFilters?: ExceptionBreakpointsFilter[];

    /**
     * The debug adapter supports stepping back via the 'stepBack' and 'reverseContinue' requests.
     */
    supportsStepBack?: boolean;

    /**
     * The debug adapter supports setting a variable to a value.
     */
    supportsSetVariable?: boolean;

    /**
     * The debug adapter supports restarting a frame.
     */
    supportsRestartFrame?: boolean;

    /**
     * The debug adapter supports the 'gotoTargets' request.
     */
    supportsGotoTargetsRequest?: boolean;

    /**
     * The debug adapter supports the 'stepInTargets' request.
     */
    supportsStepInTargetsRequest?: boolean;

    /**
     * The debug adapter supports the 'completions' request.
     */
    supportsCompletionsRequest?: boolean;

    /**
     * The set of characters that should trigger completion in a REPL. If not specified, the UI should assume the '.' character.
     */
    completionTriggerCharacters?: string[];

    /**
     * The debug adapter supports the 'modules' request.
     */
    supportsModulesRequest?: boolean;

    /**
     * The set of additional module information exposed by the debug adapter.
     */
    additionalModuleColumns?: ColumnDescriptor[];

    /**
     * Checksum algorithms supported by the debug adapter.
     */
    supportedChecksumAlgorithms?: ChecksumAlgorithm[];

    /**
     * The debug adapter supports the 'restart' request. In this case a client should not implement 'restart' by terminating and relaunching the adapter but by calling the RestartRequest.
     */
    supportsRestartRequest?: boolean;

    /**
     * The debug adapter supports 'exceptionOptions' on the setExceptionBreakpoints request.
     */
    supportsExceptionOptions?: boolean;

    /**
     * The debug adapter supports a 'format' attribute on the stackTraceRequest, variablesRequest, and evaluateRequest.
     */
    supportsValueFormattingOptions?: boolean;

    /**
     * The debug adapter supports the 'exceptionInfo' request.
     */
    supportsExceptionInfoRequest?: boolean;

    /**
     * The debug adapter supports the 'terminateDebuggee' attribute on the 'disconnect' request.
     */
    supportTerminateDebuggee?: boolean;

    /**
     * The debug adapter supports the delayed loading of parts of the stack, which requires that both the 'startFrame' and 'levels' arguments and the 'totalFrames' result of the 'StackTrace' request are supported.
     */
    supportsDelayedStackTraceLoading?: boolean;

    /**
     * The debug adapter supports the 'loadedSources' request.
     */
    supportsLoadedSourcesRequest?: boolean;

    /**
     * The debug adapter supports logpoints by interpreting the 'logMessage' attribute of the SourceBreakpoint.
     */
    supportsLogPoints?: boolean;

    /**
     * The debug adapter supports the 'terminateThreads' request.
     */
    supportsTerminateThreadsRequest?: boolean;

    /**
     * The debug adapter supports the 'setExpression' request.
     */
    supportsSetExpression?: boolean;

    /**
     * The debug adapter supports the 'terminate' request.
     */
    supportsTerminateRequest?: boolean;

    /**
     * The debug adapter supports data breakpoints.
     */
    supportsDataBreakpoints?: boolean;

    /**
     * The debug adapter supports the 'readMemory' request.
     */
    supportsReadMemoryRequest?: boolean;

    /**
     * The debug adapter supports the 'disassemble' request.
     */
    supportsDisassembleRequest?: boolean;

    /**
     * The debug adapter supports the 'cancel' request.
     */
    supportsCancelRequest?: boolean;

    /**
     * The debug adapter supports the 'breakpointLocations' request.
     */
    supportsBreakpointLocationsRequest?: boolean;

    /**
     * The debug adapter supports the 'clipboard' context value in the 'evaluate' request.
     */
    supportsClipboardContext?: boolean;

    /**
     * The debug adapter supports stepping granularities (argument 'granularity') for the stepping requests.
     */
    supportsSteppingGranularity?: boolean;

    /**
     * The debug adapter supports adding breakpoints based on instruction references.
     */
    supportsInstructionBreakpoints?: boolean;
  }

  /**
   * Properties of a breakpoint location returned from the 'breakpointLocations' request.
   */
  export interface BreakpointLocation {
    /**
     * Start line of breakpoint location.
     */
    line: integer;

    /**
     * Optional start column of breakpoint location.
     */
    column?: integer;

    /**
     * Optional end line of breakpoint location if the location covers a range.
     */
    endLine?: integer;

    /**
     * Optional end column of breakpoint location if the location covers a range.
     */
    endColumn?: integer;
  }

  /**
   * A Source is a descriptor for source code.
   * It is returned from the debug adapter as part of a StackFrame and it is used by clients when specifying breakpoints.
   */
  export interface Source {
    /**
     * The short name of the source. Every source returned from the debug adapter has a name.
     * When sending a source to the debug adapter this name is optional.
     */
    name?: string;

    /**
     * The path of the source to be shown in the UI.
     * It is only used to locate and load the content of the source if no sourceReference is specified (or its value is 0).
     */
    path?: string;

    /**
     * If sourceReference > 0 the contents of the source must be retrieved through the SourceRequest (even if a path is specified).
     * A sourceReference is only valid for a session, so it must not be used to persist a source.
     * The value should be less than or equal to 2147483647 (2^31 - 1).
     */
    sourceReference?: integer;

    /**
     * An optional hint for how to present the source in the UI.
     * A value of 'deemphasize' can be used to indicate that the source is not available or that it is skipped on stepping.
     */
    presentationHint?: string;

    /**
     * The (optional) origin of this source: possible values 'internal module', 'inlined content from source map', etc.
     */
    origin?: string;

    /**
     * An optional list of sources that are related to this source. These may be the source that generated this source.
     */
    sources?: Source[];

    /**
     * Optional data that a debug adapter might want to loop through the client.
     * The client should leave the data intact and persist it across sessions. The client should not interpret the data.
     */
    adapterData?: any[] | boolean | integer | null | number | object | string;

    /**
     * The checksums associated with this file.
     */
    checksums?: Checksum[];
  }

  /**
   * The checksum of an item calculated by the specified algorithm.
   */
  export interface Checksum {
    /**
     * The algorithm used to calculate this checksum.
     */
    algorithm: ChecksumAlgorithm;

    /**
     * Value of the checksum.
     */
    checksum: string;
  }

  /**
   * Information about a Breakpoint created in setBreakpoints, setFunctionBreakpoints, setInstructionBreakpoints, or setDataBreakpoints.
   */
  export interface Breakpoint {
    /**
     * An optional identifier for the breakpoint. It is needed if breakpoint events are used to update or remove breakpoints.
     */
    id?: integer;

    /**
     * If true breakpoint could be set (but not necessarily at the desired location).
     */
    verified: boolean;

    /**
     * An optional message about the state of the breakpoint.
     * This is shown to the user and can be used to explain why a breakpoint could not be verified.
     */
    message?: string;

    /**
     * The source where the breakpoint is located.
     */
    source?: Source;

    /**
     * The start line of the actual range covered by the breakpoint.
     */
    line?: integer;

    /**
     * An optional start column of the actual range covered by the breakpoint.
     */
    column?: integer;

    /**
     * An optional end line of the actual range covered by the breakpoint.
     */
    endLine?: integer;

    /**
     * An optional end column of the actual range covered by the breakpoint.
     * If no end line is given, then the end column is assumed to be in the start line.
     */
    endColumn?: integer;

    /**
     * An optional memory reference to where the breakpoint is set.
     */
    instructionReference?: string;

    /**
     * An optional offset from the instruction reference.
     * This can be negative.
     */
    offset?: integer;
  }
}

export default Dap;
